* COMMENT File-local variables
# -*- coding:utf-8 -*-
#+TITLE: Maximize Note taking/publishing experience with Org-Mode.
#+AUTHOR: Haran Mia
#+EMAIL: 37643674+haranmia@users.noreply.github.com
#+DATE: %T
#+STARTUP:indent
#+STARTUP: inlineimages
#+STARTUP: hideblocks

* LICENSE
MIT License

Copyright (c) 2018 Haran Mia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

** Additional licenses
**** "Publish org-mode sites on Gitlab Pages" by Rasmus Pank Roulund was a great inspiration!
The MIT License (MIT)

Copyright (c) 2016 Rasmus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


* README
  The idea is to keep everything in a single .org file,
  including both contents and configurations.
  This .org file can also be used for publishing pdf articles,
  web pages, etc. using org-modes export functionalities.

  For availabe features, please refer to the comments/source-codes below.

** TODO Prologue

* Wish-list (features/issues)
:PROPERTIES:
:VISIBILITY: all
:END:
** ISSUES
- [ ] Modify hyperlinks (internal-files starting from root-dir)
      during subtree-contents-refiling-to-org to relative-references
      depending on article's outline-level
      *see if there is a better way of acheiving this*

- [ ] Write a sample article including figures, equations and codes
- [ ] Save figures in a folder, consider file-name rules
- [ ] Start a real experimental Github-pages site

** WISH-LIST
   - [ ] CAPTURE and refile as a subtree in this note
     - [ ] Deal with duplicate outline-headline in different captures.
     - [ ] Sanitizers for title and export-file-name.
     - [ ] Consider a more generic syntax for function-finding-location.

   - [ ] Minify CSS
     - [ ] INVESTIGSTE: Whitespace removal
     - [ ] Tangle blocks in separate css files, remove comments, add license
     - [ ] Unify multiple css in a single file (or include all in HTML)
     - [ ] Automate by hooks

** Resolutions and/or Design considerations
:PROPERTIES:
:VISIBILITY: folded
:END:
- [X] Resolve conflicts with terminologies used for structuring/styles
      such as title, subtite, or page etc.

  Considerations: Using title/subtitle to refer to headings in a single article is rather trivial.
  Therefore group-wise/site-wise title/subtitle should be modified.
  For now using a simple analogy from sailboat racing:

  + a-ship (previously, pagestruct)
    + name
    + anchor (previously, link)
    + mainsail (previously, title)
    + headsail (previously, subtitle)
    + pages/articles x N ( each page will have their individual title/subtitle)

* SRC
** Generic elisp utilities
*** Utilities
#+BEGIN_SRC emacs-lisp
  (defun mca () ;; activate conda on this buffer
    (interactive)
    (conda-env-activate "mypy27"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mc () ;; quickly reloading this file and publish
    (interactive)
    (org-babel-load-file
     (expand-file-name "notes.org"
                       (file-name-as-directory "/Volumes/mu/git/mon_m")))
    (org-publish (concat "mon-" (mon-theme-name)) t))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mt () ;; quickly tangle all babel blocks in this subtree
    (interactive)
    (mon-org-subtree-tangle-all-babel-blocks))
#+END_SRC
*** Genpath
#+BEGIN_SRC emacs-lisp
  (defun mon-genpath (path-elem &optional absolute)
    (let ((relative-path (mapconcat 'directory-file-name path-elem "/")))
      (if absolute
          (expand-file-name relative-path)
        relative-path)))
  ;; Example:
  ;; (message (mon-genpath (list "a" "b" "c.txt")))
#+END_SRC
*** Minify CSS
#+BEGIN_SRC emacs-lisp
  (defun mon-css-minify-file (&optional css-src-file css-dest-file)
    (interactive)

    (let* ((src-file (or css-src-file "/tmp/orgstyle-test.css"))
           (dest-file (or css-dest-file src-file)))

        (with-temp-buffer
          (insert-file-contents src-file)
          (mon-css-remove-comments)
          (mon-css-remove-whitespaces)

          (write-region (buffer-substring-no-properties (point-min) (point-max)) nil dest-file))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-css-remove-comments()
    (interactive)

    (goto-char (point-min))
    (let ((kill-ring-at-start kill-ring) ;; save kill-ring
          (comment-start "/*")
          (comment-end "*/")
          (comment-start-skip "/\\*+[ \t]*")
          (comment-end-skip "[ \t]*\\*+/"))

      (comment-kill (count-lines (point-min) (point-max)))
      (setq kill-ring kill-ring-at-start))) ;; restore kill-ring
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-css-remove-whitespaces ()
    (interactive)

    (goto-char (point-min))
    (while (search-forward-regexp "[ \t\r\n]+" nil 'noerror)
      (replace-match "")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-css-add-license (&optional css-file-path comments)
    (interactive)
    (message "THIS FUNCTIONALITY IS NOT AVAILABLE YET")
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-css-unify-files (&optional css-files-list)
    (interactive)
    (message "THIS FUNCTIONALITY IS NOT AVAILABLE YET")
    )
#+END_SRC
** Generic org-mode utilities
*** Org-outline to filename
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-org-filename (&optional base-directory)
    (mon-org-outline-to-filename ".org" base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-filename (&optional extension base-directory)
    "Note: non-nil (file) extension contains the leading dot.
  "
    (let ((filename
           (concat (org-display-outline-path nil t "/" t) extension)))

      (if base-directory
          (expand-file-name
           filename (file-name-as-directory base-directory))
        filename)))
#+END_SRC
*** Org-outline heading (get-function)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-get-heading ()
    (org-get-heading "no-tags" "no-todo" "no-priority" "no-comment"))
  ;; Although calling (org-heading-components) and then retrieving
  ;; the 4th-element necessarily does the same thing,
  ;; org-get-heading is more intuitive, provides better abstraction.
#+END_SRC
*** Random strings/filenames using ORG ID
#+BEGIN_SRC emacs-lisp
  (defun mon-org-random-string-create (&optional insert-at-point return-string)
    (interactive)
    (let ((random-string (org-id-new))) ;; (org-id-new prefix)
      ;;(with-temp-buffer
      ;;  (insert (format "%s" random-string))
      ;;  (clipboard-kill-region (point-min) (point-max))
      ;;  )
      (kill-new random-string) ;; kill-new @ simple.el

      (if insert-at-point
          (insert (format "%s" random-string)))

      (if return-string random-string)))
#+END_SRC
*** Archive list with taglinks
#+BEGIN_SRC emacs-lisp
  (defun mon-list-files-simple (&optional archive-dest-file)
    (interactive)
    (let ((nodes ;; "/Volumes/mu/git/mon_m/stock/grains/notes/" "\.org$"
           (mon-list-files (mon-base-directory nil "notes") "\.org$" nil))

          (dest-file (or archive-dest-file
                         (concat (file-name-directory (mon-base-directory nil "notes"))
                                 "archive-simple.org"))))

      (with-temp-buffer
        ;; DEBUG-DISPLAY
        (insert (format "\n<ul>"))
           (while nodes
             (let ((the-url (nth 0 (car nodes)))
                   (the-title (nth 1 (car nodes)))
                   (the-date (nth 2 (car nodes))))

               (if (and the-url the-title the-date)
                   (insert
                    (format "\n<li><span class=\"archive-date\">%s</span> -- <a href=\"%s\">%s</a></li>"
                            (format-time-string "%d %b %Y" (date-to-time (nth 2 (car nodes))))
                            the-url
                            the-title))))
             (setq nodes (cdr nodes)))
           (insert (format "\n</ul>"))
           (write-region (buffer-substring-no-properties (point-min) (point-max)) nil dest-file))
      ))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-list-files-extended (&optional archive-dest-file)
    (interactive)
    (let ((nodes ;;"/Volumes/mu/git/mon_m/stock/grains/notes/"
           (mon-list-files (mon-base-directory nil "notes") "\.org$" t))

          (f-print (lambda (x)
                     (while x
                       (message (format "%s %s" (car (car nodes)) (cdr (car nodes))))
                       (setq nodes (cdr nodes)))))
          (dest-file (or archive-dest-file
                         (concat (file-name-directory (mon-base-directory nil "notes"))
                                 "archive-taglinks.org"))))

      (with-temp-buffer
        ;; DEBUG-DISPLAY
        ;;(message (format "\n LIST: %s" nodes))
        ;;(message (format "\n LIST-alist-get: %s" (alist-get (intern "xx") nodes)))
        (while nodes
          (let ((the-tag (car (car nodes))))

            (if (not (string= the-tag ""))
                (insert (format "\n<h3 id=\"%s\">%s</h3>\n<ul class=\"archive\">%s\n</ul>"
                                the-tag
                                the-tag
                                (mapconcat
                                 'identity
                                 (cl-loop for y in (alist-get (car (car nodes)) nodes)
                                          collect (progn
                                                    (let ((the-url (nth 0 y))
                                                          (the-title (nth 1 y))
                                                          (the-date (nth 2 y)))
                                                      (if (and the-url the-title the-date)
                                                          (format "\n<li><span class=\"archive-date\">%s</span> -- <a href=\"%s\">%s</a></li>"
                                                                  (format-time-string "%d %b %Y" (date-to-time the-date))
                                                                  the-url
                                                                  the-title)))))
                                 "")))))
          (setq nodes (cdr nodes)))
        (write-region (buffer-substring-no-properties (point-min) (point-max)) nil dest-file))
      ))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-list-files (&optional directory regexp-pat extended)
    (let ((nodes '())
          (f-get-prop (lambda (file prop)
                        (mon-retrieve-org-file-custom-properties file prop))))

      (mapc (lambda (x)
              (if extended
                  (cl-loop for y in (split-string (mapconcat 'identity (funcall f-get-prop x "SELECT_TAGS") "") ",")
                           collect (setq nodes (mon-local-accumulate-elements y nodes)))
                (setq nodes
                      (append nodes
                              (list (list (replace-regexp-in-string
                                           ".org$"
                                           ".html"
                                           (file-relative-name
                                            (or (car (funcall f-get-prop x "FILE_NAME")) x)
                                            (mon-base-directory nil "notes")))
                                          (car (funcall f-get-prop x "TITLE"))
                                          (car (funcall f-get-prop x "DATE"))))))))
            (directory-files-recursively directory regexp-pat))

      nodes))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-accumulate-elements (y alist)
    (let ((f-get-prop (lambda (file prop)
                        (mon-retrieve-org-file-custom-properties file prop))))

      (setf (alist-get (intern y) alist) ;; update elements in the list
            (append (alist-get (intern y) alist)
                    (list (list (replace-regexp-in-string
                                 ".org$"
                                 ".html"
                                 (file-relative-name
                                  (or (car (funcall f-get-prop x "FILE_NAME")) x)
                                  (mon-base-directory nil "notes")))
                                (car (funcall f-get-prop x "TITLE"))
                                (car (funcall f-get-prop x "DATE"))))))
      alist))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-retrieve-org-file-custom-properties (&optional file props)
    (interactive)

    (with-temp-buffer
      (insert-file-contents file nil nil nil t)
      (org-mode)
      (goto-char (point-min))
      ;;(plist-get (org-export-get-environment) props)

      ;;(message (format "\n\n\n\n\n***** ***** FILE=%s file=%s"
      ;;                 (replace-regexp-in-string
      ;;                  ".org$"
      ;;                  ".html"
      ;;                  (file-relative-name
      ;;                   file;;(file-name-directory file) ;; such as "stock/grains/articles/a.org"
      ;;                   (mon-base-directory))) ;;(mon-base-directory nil "notes")))
      ;;                 file))

      (let* ((parse-tree (org-element-parse-buffer))
             (f-parse-for-keyword
              (lambda (props)
                (org-element-map parse-tree 'keyword
                  (lambda (element) (when (string-match props
                                                        (org-element-property :key element))
                                      ;;element
                                      (org-element-property :value element)
                                      ))))))

        (funcall f-parse-for-keyword props))
      ))
#+END_SRC
#+BEGIN_SRC emacs-lisp

#+END_SRC
** CAPTURE and refile as a subtree in this note
*** Capture Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("a" "Articles" entry
           (file+olp buffer-file-name
                     "STOCK" "GRAINS" "ARTICLES") ;; Outline "STOCK/GRAINS/ARTICLES" must exist
           "* TODO %^{Title}
  ,#+OPTIONS: toc:nil
  ,#+begin_takeaway
  %^{Takeaway}
  ,#+end_takeaway
  ,#+begin_keywords
  %^{Keywords (comma separated)}
  ,#+end_keywords
  %\\2\n%?\n"
           :prepend t :kill-buffer t)
          ;;
          ("n" "Notes" entry
           (file+olp buffer-file-name
                     "STOCK" "GRAINS" "NOTES") ;; Outline "STOCK/GRAINS/NOTES" must exist
           "* TODO %^{Title}
  ,#+OPTIONS: toc:nil
  ,#+begin_takeaway
  %^{Takeaway}
  ,#+end_takeaway
  ,#+begin_keywords
  %^{Keywords (comma separated)}
  ,#+end_keywords
  %\\2\n%?\n"
           :prepend t :kill-buffer t)
          ;;
          ("i" "APEX" entry
           (file+olp buffer-file-name
                     "STOCK" "GRAINS" "APEX") ;; Outline "STOCK/GRAINS/APEX" must exist
           "* TODO %^{Title}
  ,#+OPTIONS: toc:nil
  ,#+begin_takeaway
  %^{Takeaway}
  ,#+end_takeaway
  ,#+begin_keywords
  %^{Keywords (comma separated)}
  ,#+end_keywords
  %\\2\n%?\n"
           :prepend t :kill-buffer t)
          )
        )
  ;; To capture using the above template, use C-c c a
  ;; then interactively input Title and other entries
  ;; finally C-c C-c to finish.
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-after-finalize-hook ()
    (org-capture-goto-last-stored))

  (add-hook 'org-capture-after-finalize-hook
            'mon-org-capture-after-finalize-hook)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-prepare-finalize-hook ()
      (progn
        (mon-org-custom-export-file-name-create)
        (mon-org-custom-id-create)
        (mon-org-custom-title-create)
        (mon-org-custom-subtitle-create)
        (mon-org-custom-author-create)
        (mon-org-custom-email-create)
        (mon-org-custom-create-timestamp-create)
        (mon-org-custom-startup-options-create)
        ))

  (add-hook 'org-capture-prepare-finalize-hook
            'mon-org-capture-prepare-finalize-hook)

#+END_SRC

*** Custom properties (export-file-name, titles, etc.)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-property-get (&optional property-str)
    "Properties such as EXPORT_FILE_NAME etc. to be passed
  enclosed within double quotation."

    (org-entry-get (point) property-str))
#+END_SRC
**** EXPORT_FILE_NAME
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-export-file-name-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file-name (mon-org-custom-property-get "EXPORT_FILE_NAME")))
        (unless export-file-name
          (org-set-property "EXPORT_FILE_NAME"
                            (mon-org-outline-to-org-filename))))
      (widen)))
#+END_SRC

**** TANGLE HEADER-ARGS (Cf. EXPORT_FILE_NAME)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-bable-tangle-header-args-create (&optional extension)
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file (mon-org-custom-property-get "header-args")))
        (unless export-file
          (org-set-property "header-args"
                            (concat ":tangle "
                                    (mon-org-outline-to-filename)
                                    (or extension "")))))
      (widen)))
#+END_SRC
**** ORG ID and CUSTOM_ID
#+BEGIN_SRC emacs-lisp
  (require 'org-id) ;; for custom-id in property-drawers (@subtree)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun mon-org-id-create (&optional force)
    (interactive)
    (org-id-get-create force))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-id-create (&optional force prefix)
    (interactive)

    (when force (org-entry-put (point) "CUSTOM_ID" nil))

    (let ((custom-id (mon-org-custom-property-get "CUSTOM_ID")))
      (if (and custom-id (stringp custom-id) (string-match "\\S-" custom-id))
          custom-id
        (setq custom-id (org-id-new prefix)))

      (org-entry-put (point) "CUSTOM_ID" custom-id)
      (org-id-add-location custom-id (buffer-file-name (buffer-base-buffer)))))
#+END_SRC

**** TTILE
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-title-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "TITLE")))
        (unless title
          (org-set-property "TITLE"
                            (mon-org-outline-get-heading))))
      (widen)))
 #+END_SRC
**** SUBTITLE
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-subtitle-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "SUBTITLE")))
        (unless title
          (org-set-property "SUBTITLE" ""))) ;; now, just a placeholder
      (widen)))
#+END_SRC

**** AUTHOR
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-author-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "AUTHOR")))
        (unless title
          (org-set-property "AUTHOR" ""))) ;; now, just a placeholder
      (widen)))
#+END_SRC
**** EMAIL
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-email-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "EMAIL")))
        (unless title
          (org-set-property "EMAIL" ""))) ;; now, just a placeholder
      (widen)))
#+END_SRC
**** Created date and time a.k.a. CREATE_TIMESTAMP
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-create-timestamp-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "CREATE_TIMESTAMP")))
        (unless title
          (org-set-property "CREATE_TIMESTAMP" (format-time-string "%c" (current-time)))))
      (widen)))
#+END_SRC
**** KEYWORDS
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-keywords-create (&optional keywords)
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "KEYWORDS")))
        (unless title
          (org-set-property "KEYWORDS" (or keywords "")))) ;; now, just a placeholder
      (widen)))
#+END_SRC
**** DESCRIPTION
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-description-create (&optional descriptions)
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "DESCRIPTION")))
        (unless title
          (org-set-property "DESCRIPTION" (or descriptions "")))) ;; now, just a placeholder
      (widen)))
#+END_SRC
**** STARTUP OPTIONS
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-startup-options-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "STARTUP")))
        (unless title
          (org-set-property "STARTUP" ""))) ;; now, just a placeholder
      (widen)))
#+END_SRC
** Parse contents
*** Retrieve takeaway and keywords
#+BEGIN_SRC emacs-lisp
  (defun mon-remove-special-region (region-name)
    (interactive)

    (let ((beg (progn (re-search-backward (concat "#\\+\\<+begin_" region-name "\\>"))
                      (match-beginning 0)))
          (end (progn (re-search-forward (concat "#\\+\\<+end_" region-name "\\>"))
                      (match-end 0))))
      (delete-region beg end)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-retrieve-contents-from-special-region (&optional region-name delete-flag)
    (interactive)

    (let ((beg (+ 1 (re-search-forward (concat "#\\+\\<+begin_" region-name "\\>"))))
          (end (progn (re-search-forward (concat "#\\+\\<+end_" region-name "\\>"))
                      (match-beginning 0))))
      (let ((retrieved-content (buffer-substring beg end)))
        (if delete-flag
            (mon-remove-special-region region-name))
        retrieved-content)))

#+END_SRC
#+BEGIN_SRC emacs-lisp
    (defun mon-retrieve-contents-from-special-blocks-keywords (&optional delete-flag)
      (interactive)

      (mon-retrieve-contents-from-special-region "keywords"  delete-flag))

#+END_SRC
#+BEGIN_SRC emacs-lisp
    (defun mon-retrieve-contents-from-special-blocks-takeaway (&optional delete-flag)
      (interactive)

      (mon-retrieve-contents-from-special-region "takeaway"  delete-flag))
#+END_SRC

** Refile a subtree from this note
*** File-local variables
#+BEGIN_SRC emacs-lisp
  (defun mon-org-insert-file-headers
      (&optional
       title
       subtitle
       author
       email
       fixed-date-time
       description
       keyword-tags
       startup-option)

    (interactive)

    (format "* COMMENT File-local variables
  # -*- coding:utf-8 -*-
  ,#+TITLE: %s
  ,#+SUBTITLE: %s
  ,#+AUTHOR: %s
  ,#+EMAIL: %s
  ,#+DATE: %s
  ,#+DESCRIPTION: %s
  ,#+KEYWORDS: %s
  ,#+STARTUP: %s\n\n\n"
            (or title "Untitled")
            (or subtitle "")
            (or author "Anonymous")
            email
            (or fixed-date-time (format-time-string "%c" (current-time))) ;; if not previously created, current-time should be good
            description
            keyword-tags
            (or startup-option "indent")))
#+END_SRC
*** Subtree contents for org-export
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-to-org (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile ".org" base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-bare (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile nil base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile (&optional extension base-directory)
    (interactive)

    (save-excursion
      (org-narrow-to-subtree)
      (org-back-to-heading)
      (let ((target-filename
             (or (mon-org-custom-property-get "EXPORT_FILE_NAME")
                 (mon-org-outline-to-filename extension base-directory))))

        (write-region (org-get-entry) nil target-filename))
      (widen)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-to-org-no-props (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile-no-props ".org" nil base-directory))

  (defun mon-org-subtree-contents-refile-bare-no-props (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile-no-props nil nil base-directory))

  (defun mon-org-subtree-contents-refile-to-org-no-props-delete-keywords-block (&optional extension base-directory)
    (interactive)
    (mon-org-subtree-contents-refile-no-props ".org" t base-directory))

  (defun mon-org-subtree-contents-refile-to-org-no-props-keep-keywords-block (&optional extension base-directory)
    "Identical to: mon-org-subtree-contents-refile-to-org-no-props"
    (interactive)
    (mon-org-subtree-contents-refile-no-props ".org" nil base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-no-props (&optional extension del-keywords-block base-directory)

    (save-excursion
      (org-narrow-to-subtree)
      (org-back-to-heading)

      (mon-org-custom-description-create
       (replace-regexp-in-string
        "[\n]+" " -EOL- "
        (mon-retrieve-contents-from-special-blocks-takeaway
         del-keywords-block)))

      (mon-org-custom-keywords-create
       (replace-regexp-in-string
        "[ \t\n]*" " -EOL- "
        (mon-retrieve-contents-from-special-blocks-keywords
         del-keywords-block)))

      (let ((org-yank-adjusted-subtrees t)
            (target-filename
             (or (mon-org-custom-property-get "EXPORT_FILE_NAME")
                 (mon-org-outline-to-filename extension base-directory)))
            (this-title (mon-org-custom-property-get "TITLE"))
            (this-subtitle (mon-org-custom-property-get "SUBTITLE"))
            (this-author (mon-org-custom-property-get "AUTHOR"))
            (this-email (mon-org-custom-property-get "EMAIL"))
            (this-create-timestamp (mon-org-custom-property-get "CREATE_TIMESTAMP"))
            (this-update-timestamp (mon-org-custom-property-get "UPDATE_TIMESTAMP")) ;; (last update provided via postamble) ponder if keeping that information in property drawer will be of use
            (this-description (concat (mon-org-custom-property-get "DESCRIPTION")))
            (this-keywords (concat (mon-org-custom-property-get "KEYWORDS")))
            (this-startup (mon-org-custom-property-get "STARTUP"))
            )

        ;;(write-region (org-get-entry) nil target-filename)
        (org-copy-subtree)
        (with-current-buffer (get-buffer-create (concat "*-temp-buffer-SOME-RANDOM-ID-HERE-*"))
          (org-mode)


          (insert (mon-org-insert-file-headers
                   this-title ;; title
                   this-subtitle ;; subtitle
                   this-author ;; author
                   this-email ;; email
                   this-create-timestamp ;; fixed-date-time
                   this-description ;; description
                   this-keywords ;; keyword-tags
                   this-startup ;;startup-option
                   ))
          (save-excursion
            (goto-char (point-min))
            (write-region (point-at-bol 2) (point-max) target-filename)) ;; removes the "* COMMENT File-local variables" outline

          (org-yank)
          (org-back-to-heading)


          (save-excursion
            (if org-descriptive-links
                (org-toggle-link-display))
            (while (search-forward-regexp
                    "^\\[\\[file:stock/grains/media/" nil 'noerror)
              (replace-match
               (concat "[[file:" (replace-regexp-in-string ;; for now replace all of the suffix-string in hyperlink
                                  "[ aA-zZ]+/"
                                  "../"
                                  (file-relative-name
                                   (file-name-directory target-filename) ;; such as "stock/grains/articles/a.org"
                                   "stock/grains"))
                       "media/")
               t
               'literal))
            )
          ;;(goto-char (point-min)) ;; heading may be different now, use point-min--> try save-excursion instead


          (if (re-search-forward ":PROPERTIES:" (point-max) t)
              (let ((beg (match-beginning 0))
                    (end (re-search-forward ":END:")))
                (write-region (+ end 1) (point-max) target-filename t)) ;; write-region with append=t

            (write-region (point-at-bol 2) (point-max) target-filename t))


          (kill-buffer)))
      (widen)))
#+END_SRC

*** Tangle babel source blocks
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-tangle-all-babel-blocks ()
    "header-args :tangle <filename.extension>
  is assumed to be present in subtree properties."
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)
      (org-babel-tangle)
      (widen)))
#+END_SRC
** REST API
*** Facebook API
#+BEGIN_SRC emacs-lisp
  (defun mon-facebook-comments-plugin-meta-props (&optional output-file title description)
    (format "

  <meta property=\"fb:app_id\" content=\"2325134224372901\" />
  <meta property=\"og:url\" content=\"https://mesbah-uddin.github.io/%s\" />
  <meta property=\"og:title\" content=\"%s\" />
  <meta property=\"og:type\" content=\"Website\" />
  <meta property=\"og:description\" content=\"%s\" />
  <meta property=\"og:image\" content=\"Replace with some image 200px 200px\" />

  "
            (or output-file "Replace with URL of the page")
            (or title "Replace with Page Title")
            (or description "Add Some description")
            "Replace with some image 200px 200px"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-facebook-comments-plugin-editor ()
    "
  <div class=\"feedback\">
   <div class=\"fb-comments\" data-href=\"https://mesbah-uddin.github.io/%f\" data-numposts=\"10\" data-width=\"100%%\" data-colorscheme=\"light\">
   </div>
  </div>\n
  ")
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-facebook-comments-plugin-codes ()
    "<div id=\"fb-root\"></div>
     <script>

       window.fbAsyncInit = function() {
         FB.init({
           appId      : '2325134224372901',
           cookie     : true,
           xfbml      : true,
           version    : 'v3.2'
         });

         FB.AppEvents.logPageView();
         };

         (function(d, s, id) {
           var js, fjs = d.getElementsByTagName(s)[0];
           if (d.getElementById(id)) return;
           js = d.createElement(s); js.id = id;
           js.src = 'https://connect.facebook.net/en_US/sdk.js';
           fjs.parentNode.insertBefore(js, fjs);
         }(document, 'script', 'facebook-jssdk'));

     </script>
    ")
#+END_SRC

** HTML Publishing
*** Congfiguration database
Put all configurations in the hash-table 'mon-configdb'
#+BEGIN_SRC emacs-lisp
  (defvar mon-configdb)
  (setq mon-configdb (make-hash-table))
#+END_SRC

*** Core directory and path utilities
**** File-dir and root-dir
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-file-dir mon-configdb)
        (file-name-directory (or load-file-name buffer-file-name)))

  (defun mon-file-dir ()
    (gethash 'mon-file-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-root-dir mon-configdb) "stock")

  (defun mon-root-dir (&optional init-root-dir)
    (or init-root-dir
        (gethash 'mon-root-dir mon-configdb)))
#+END_SRC
**** Base directory
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-contents-dir mon-configdb)
        (concat (file-name-as-directory (mon-root-dir))
                (file-name-as-directory "grains"))) ;; default

  (defun mon-contents-dir (&optional init-contents-dir use-as-origin)
    ;; set
    (and init-contents-dir
         (if use-as-origin
             ;; if
             (setf (gethash 'mon-contents-dir mon-configdb)
                   (file-name-as-directory init-contents-dir))
           ;; else
           (setf (gethash 'mon-contents-dir mon-configdb)
                 (concat (file-name-as-directory (mon-root-dir))
                         (file-name-as-directory init-contents-dir)))))
    ;; get
    (gethash 'mon-contents-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-www-contents-directory (&optional dir prefix-path suffix-path absolute)
    (let* ((this-dir
            (file-name-as-directory
             (concat (or (and prefix-path (file-name-as-directory prefix-path))
                         (mon-contents-dir))
                     dir)))

           (suffix-to-this
            (and suffix-path
                 (if (file-name-extension suffix-path) suffix-path
                   (file-name-as-directory suffix-path))))
           ;;
           (contents-relative-path (concat this-dir suffix-to-this)))


        ;; Use concat to force relative path by default.
        ;; For absolute==NON-NIL, use absolute path.
        (if absolute
            (expand-file-name contents-relative-path)
          contents-relative-path)))
#+END_SRC
**** Publishing-dir
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-www-dir mon-configdb)
        (file-name-as-directory "mesbah-uddin.github.io")) ;; default
  (defun mon-www-dir (&optional init-www-dir use-as-origin)
      ;; set
      (and init-www-dir
           (if use-as-origin
               (setf (gethash 'mon-www-dir mon-configdb)
                     (file-name-as-directory init-www-dir))))

      ;; get
      (gethash 'mon-www-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-www-publish-directory (&optional dir prefix-path suffix-path absolute)
    (let* ((this-dir
            (file-name-as-directory
             (concat (or (and prefix-path (file-name-as-directory prefix-path))
                         (mon-www-dir))
                     dir)))

           (suffix-to-this
            (and suffix-path
                 (if (file-name-extension suffix-path) suffix-path
                   (file-name-as-directory suffix-path))))
           ;;
           (contents-relative-path (concat this-dir suffix-to-this)))

      ;; Use concat to force relative path by default.
      ;; For absolute==NON-NIL, use absolute path.
      (if absolute
          (expand-file-name contents-relative-path)
        contents-relative-path)))

#+END_SRC

*** Theme
**** Name and deploy directory
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'theme-name mon-configdb) '"poole")

  (defun mon-theme-name (&optional init-theme-name)
    (or init-theme-name
        (gethash 'theme-name mon-configdb)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-theme-deploy-dir (&optional init-theme-name)
    (format "chunk/themes/%s" (mon-theme-name init-theme-name)))
#+END_SRC
**** Attributes
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'theme-attributes mon-configdb)
        '((:mainsail . "Mesbah Uddin")
          (:headsail . "Concise notes on improving the odds")))

  (defun mon-theme-attributes (key &optional init-theme-name)
    (alist-get key (gethash 'theme-attributes mon-configdb)))
#+END_SRC
**** Base extension
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-attachments mon-configdb)
        (regexp-opt '("css" "woff" "js" "html" "pdf"
                      "gif" "ico" "jpg" "jpeg" "png" "svg")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-base-extension (&optional init-theme)
    (gethash 'mon-attachments mon-configdb))
#+END_SRC
**** Base directory
#+BEGIN_SRC emacs-lisp
  (defun mon-base-directory (&optional theme page prefix-dir suffix-dir absolute)
    (let ((dir
           (if theme
               (mon-www-contents-directory (mon-theme-deploy-dir theme) (mon-root-dir)) ;; if
             ;; else == mon-base-direcotry-no-theme
             (mon-www-contents-directory page prefix-dir suffix-dir absolute))))

    (downcase dir)))
#+END_SRC
**** Publishing directory
#+BEGIN_SRC emacs-lisp
  (defun mon-publishing-directory (&optional theme page prefix-dir suffix-dir absolute)
    (let ((dir
           (if theme
               (mon-www-publish-directory (mon-theme-deploy-dir theme)) ;; if
             ;; else == mon-www-publish-dir-no-theme
             (mon-www-publish-directory page prefix-dir suffix-dir absolute))))

    (downcase dir)))
#+END_SRC
**** Postamble
#+BEGIN_SRC emacs-lisp
  ;; Define advice
  (defun mon-add-org-html-format-spec (oldfun &rest args)
    "Format spec for obtaining the :output-file"
    (let* ((info (nth 0 args)) ;; take out the only argument from list
           ;;(outfile `((?f . ,(file-name-nondirectory
           ;;                   (nth 0 (mapcar #'(lambda (y)
           ;;                                      (plist-get y :output-file))
           ;;                                  args))))))
           (pub-dir (plist-get info :publishing-directory))
           (prefix-dir (mon-genpath (cdr (split-string pub-dir "/"))))
           (output-file (mon-genpath
                         (list prefix-dir
                               (nth 0 (cdr (split-string (plist-get info :output-file) pub-dir))))))
           (output-file-no-index (cond ((string-match-p "index.html" output-file)
                                        (if (string= "/index.html" output-file)
                                            "" (file-name-directory output-file)))
                                       (t output-file)))
           (outfile `((?f . ,output-file-no-index)))
           (description-text (with-temp-buffer
                               (insert (or (plist-get info :description) ""))
                               (goto-char (point-min))
                               (while (re-search-forward "-EOL-" nil t)
                                 (replace-match "\n"))
                               (buffer-string)))
           (summary-format `((?S . ,description-text)))
           (keywords-text (with-temp-buffer
                            (insert (or (plist-get info :keywords) ""))
                               (goto-char (point-min))
                               (while (re-search-forward "-EOL-" nil t)
                                 (replace-match "\n"))
                               (buffer-string)))
           (keywords-format `((?K . ,(mon-tags-keywords keywords-text)))))


      ;; apply passes arguments separately (spreads the list)
      (append (apply oldfun args) outfile summary-format keywords-format)))



  ;; Add advice
  (advice-add 'org-html-format-spec :around #'mon-add-org-html-format-spec)
#+END_SRC
#+BEGIN_SRC emacs-lisp
    (defun mon-chomp (str)
      (replace-regexp-in-string
       "[ \t\n]*$"
       ""
       (replace-regexp-in-string "^[ \t\n]*" "" str)))

    (defun mon-tags-keywords (&optional tags-csv)
      (let* ((my-tags (split-string tags-csv ","))
             (my-tags-string (mapconcat 'identity my-tags  ""))
              (f-tag-span (lambda (x)
                            (let ((sanitized-x (mon-chomp x)))
                              ;;(message (format "\nX-IN-LAMBDA=%S" sanitized-x))
                              (format
                               "
          <span class=\"tag\">
            <a href=\"/notes/archive-taglinks.html#%s\"
               onclick=\"javascript:ga('send', 'event', 'Tag', 'Click', '%s Click');\">
               %s
            </a>
          </span>"
                               sanitized-x
                               sanitized-x
                               sanitized-x)))))

  (if (not (string= "" my-tags-string))
      (concat "<div class=\"anchor-tags\">\nTags: "
              (mapconcat
               'identity
               (cl-loop for x in my-tags by #'cddr collect (funcall f-tag-span x))
               "\t")
              "\n</div>")
    "")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-postamble (&optional init-theme)
    (concat
     ;;(mon-last-update)

     "%K" ;; anchor-tags

     (mon-share-me "twitter" "facebook" "google+")
     (mon-facebook-comments-plugin-editor)
     (mon-copyright "content" "icons")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-share-me (&optional $twitter $facebook $google+)
    (format "
  <div class=\"share-me\">

  <a href=\"https://twitter.com/intent/tweet?via=@MesbahUddin&hashtags=%%t&text=%%S&url=https://mesbah-uddin.github.io/%%f\"
         title=\"\"
         onclick=\"javascript:ga('send', 'event', 'Button', 'Click', 'Twitter Share');\"
         target=\"_blank\">
         <i class=\"fab fa-twitter-square fa-2x\"></i>
      </a>

      <a href=\"https://www.facebook.com/sharer.php?u=https://mesbah-uddin.github.io/%%f\"
         title=\"\"
         onclick=\"javascript:ga('send', 'event', 'Button', 'Click', 'Facebook Share');\"
         target=\"_blank\">
         <i class=\"fab fa-facebook-square fa-2x\"></i>
      </a>

      <a href=\"https://plus.google.com/share?url=https://mesbah-uddin.github.io/%%f\"
         title=\"\"
         onclick=\"javascript:ga('send', 'event', 'Button', 'Click', 'Google Plus Share');\"
         target=\"_blank\">
         <i class=\"fab fa-google-plus-square fa-2x\"></i>
      </a>


      <a href=\"https://www.linkedin.com/shareArticle?mini=true&url=https://mesbah-uddin.github.io/%%f\"
         &summary=%%S&source=LinkedIn
         title=\"\"
         onclick=\"javascript:ga('send', 'event', 'Button', 'Click', 'LinkedIn Share');\"
         target=\"_blank\">
         <i class=\"fab fa-linkedin fa-2x\"></i>
      </a>

      <a href=\"mailto:?to=&amp;subject=%%f&amp;body=%%f\">
         <i class=\"far fa-envelope fa-2x\"></i>
      </a>

      <span class=\"gecko\">
        <!-- Open an issue -->
        <a href=\"https://github.com/mesbah-uddin/mesbah-uddin.github.io/issues/new?title=%%t&body=Change request feedback: https://mesbah-uddin.github.io/%%f\" target=\"_blank\">
           <i class=\"fab fa-github-square fa-2x\"></i>
        </a>
      </span>

      </div>"
        ))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-last-update ()
    "<p>Last update: <span class=\"date\">%C</span></p>"
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-copyright (&optional $content $icons)
    "
  <div class=\"footer\">
    <p>Content &copy; 2018 All rights reserved
    </p>
  </div>"
    )
#+END_SRC
**** Preamble
#+BEGIN_SRC emacs-lisp
  (defun mon-html-preamble (&optional init-page init-theme mainsail headsail)
    "TBD: Constructor for ships /w theme-inheritance someday."
    (mon-html-preamble-impl-proxy '((:ships . (((:name . "About")
                                                (:anchor . "/"))
                                               ((:name . "Notes")
                                                (:anchor . "notes")))))
                                  mainsail ;; main-headline
                                  headsail) ;; sub-headline
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-preamble-impl-proxy (&optional ships-alist mainsail headsail)
    "Note: mainsail/headsail are placeholders for main/sub-headline."

    (let* ((f-name (lambda (x) (alist-get ':name  x)))
           (f-link (lambda (x) (alist-get ':anchor  x)))
           (f-insert
            (lambda (x)
              (progn
                (insert (format "\n  <a href=\"%s\">%s</a>"
                                (expand-file-name (file-name-as-directory
                                                   (funcall f-link x))
                                                  "/")
                                (funcall f-name x)))))))

      (with-temp-buffer

        (insert (format "<div class=\"masthead\">"))
        (insert (format "\n <h3 class=\"mainsail\"><a href=\"localhost:8000\" title=\"Home\">%s</a></h3>" (or mainsail "%%MAIN-HEADLINE")))
        (insert (format "\n <h3 class=\"headsail\"><small>%s</small></h3>" (or headsail "%%SUB-HEADLINE")))
        (insert (format "\n <ul class=\"compass\">"))

        (funcall f-insert (car (alist-get ':ships ships-alist)))
        (mapc #'(lambda (y)
                  (funcall f-insert y))
              (cdr (alist-get ':ships ships-alist)))

        (insert (format "\n </ul>"))
        (insert (format "\n</div> <!-- masthead -->\n"))

        (insert (mon-facebook-comments-plugin-codes))
        (buffer-string))))
#+END_SRC
**** Head
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head (&optional local-css-list)
    "TODO: Provide both local theme and URI based (google-api, boosstrap etc.) css.
  Note: It is possible to override the global value by setting
  ,#+HTML_HEAD: attributes appropriately in individual .org files."

    (mon-html-head-impl
     (list "style.css" "syntax.css") ;; poole
     ;; (list "normalize.css" "htmlize.css" "orgstyle-bare.css" "orgstyle-custom.css") ;; proxy
     ))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-impl (&optional local-css-list)

    (let ((f-local-css-path (lambda (x) (mon-genpath (list (mon-theme-deploy-dir) "assets" "css" x)))))
      (with-temp-buffer

        (mapc #'(lambda (y) (insert (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"/%s\" />\n" (funcall f-local-css-path y))))
              local-css-list)

        (insert (format "<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.5.0/css/all.css\" integrity=\"sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU\" crossorigin=\"anonymous\">"))

        (buffer-string))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-extra (&optional local-css-list)
    "Note: It is possible to override the global value by setting
  ,#+HTML_HEAD_EXTRA: attributes appropriately in individual .org files."

    (mon-html-head-extra-impl local-css-list))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-extra-impl (&optional local-css-list)
    (let ((f-local-css-path (lambda (x) (mon-genpath (list (mon-theme-deploy-dir) "assets" "css" x)))))
      (with-temp-buffer
        (mapc #'(lambda (y) (insert (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"/%s\" />\n" (funcall f-local-css-path y))))
              local-css-list)

        (insert (format "<link href='http://fonts.googleapis.com/css?family=Droid+Serif' rel='stylesheet' type='text/css'>"))
        (insert (format "<link href='http://fonts.googleapis.com/css?family=Droid+Sans+Mono' rel='stylesheet' type='text/css'>"))

        (buffer-string))))
#+END_SRC

***** Meta-info
#+BEGIN_SRC emacs-lisp
  (defun mon-org-html--build-meta-info (oldfun &rest args)
    (let* ((info (nth 0 args))
           (pub-dir (plist-get info :publishing-directory))
           (prefix-dir (mon-genpath (cdr (split-string pub-dir "/"))))
           (output-file (mon-genpath
                         (list prefix-dir
                               (nth 0 (cdr (split-string (plist-get info :output-file) pub-dir))))))
           (output-file-no-index (cond ((string-match-p "index.html" output-file)
                                        (if (string= "/index.html" output-file)
                                            "" (file-name-directory output-file)))
                                       (t output-file)))

           (facebook-comments-plugin-metadata
            (mon-facebook-comments-plugin-meta-props
             output-file-no-index
             (plist-get info :title)
             (plist-get info :description) ; TODO: define-capture (ponder: keywords)
             )))

    (concat (apply oldfun args) facebook-comments-plugin-metadata)))
  ;; Add advice
  (advice-add 'org-html--build-meta-info :around #'mon-org-html--build-meta-info)
#+END_SRC
*** Sitemaps
**** ARTICLES
#+BEGIN_SRC emacs-lisp
  (defun mon-sitemap-function-article (title list)
    (mapconcat
     'identity
     (list
      (concat "#+TITLE: " title)
      (org-list-to-subtree list '(:istart "** "))
      (format "
     ,#+OPTIONS: title:nil num:nil toc:nil
     ,#+HTML_HEAD_EXTRA: <link rel=\"stylesheet\" type=\"text/css\" href=\"/chunk/themes/%s/assets/css/%s\"/>" (mon-theme-name) "style-article-index.css"))
     "\n\n"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-format-entry-article-div (entry style project)
    (when (not (directory-name-p entry))
      (concat
       (format "
      [[file:%s][%s]]
      ,#+begin_wrap-up
      ,#+begin_cruise-date
      %s
      ,#+end_cruise-date
      ,#+begin_tags
      %s
      ,#+end_tags
      ,#+end_wrap-up

      ,#+INCLUDE: \"%s::takeaway\"

      [[file:%s][Read more]]
      "
               entry
               (org-publish-find-title entry project)
               (format-time-string "%B %e, %Y" (org-publish-find-date entry project))
               (org-publish-find-property entry :keywords project 'html)
               entry
               entry))))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-format-entry-article (entry style project)
    (when (not (directory-name-p entry))

      (let* ((f-link (lambda (x) (plist-get (nth 1 x) :raw-link)))
             (f-name (lambda (x) (nth 2 x)))
             (f-name-and-link (lambda (x)
                                (progn (format "\n  [[%s][%s]]"
                                               (funcall f-link x)
                                               (funcall f-name x)))))
             (f-get-prop (lambda (file prop)
                           (mon-retrieve-org-file-custom-properties file prop)))
             (author-property (org-publish-find-property entry :author project))
             (author-and-link
              (cond ((null author-property) "Anonymous")
                    ((atom author-property) author-property)
                    ((consp (car author-property))
                     (mapconcat
                      'identity
                      (cl-loop for x in author-property by #'cddr collect (funcall f-name-and-link x))
                      ", "))))
             (the-description (car (funcall f-get-prop (concat (mon-base-directory nil "notes") entry) "DESCRIPTION"))) ;; (mapconcat 'identity (funcall f-get-prop (concat (mon-base-directory nil "notes") entry) "DESCRIPTION") "")
             (sanitized-description (replace-regexp-in-string  "-EOL-" "\n" the-description))
             (date-property (org-publish-find-property entry :date project)))
        ;;(author-and-link
        ;; (cond ((null author-property) "Anonymous")
        ;;       ((atom author-property) author-property)
        ;;       (t (format "[[%s][%s]]"
        ;;                  (plist-get (nth 1 author-property) :raw-link)

        (concat
         (format "
        [[file:%s][%s]]
        ,#+begin_wrap-up
        <h1 class=\"cruise-headline\">[[file:%s][%s]]</h1>
        \n<div>\n <span class=\"cruise-date\"> %s </span>\n%s\n</div>
        %s [[file:%s][Read more]]
        <hr />
        ,#+end_wrap-up
        "
                 "DUMMY";;entry
                 "DUMMY";;(org-publish-find-title entry project)
                 ;;
                 entry
                 (org-publish-find-title entry project)
                 ;;
                 (if date-property
                     (format-time-string "%d %b %Y" (date-to-time (car date-property)))   ;; use date-property, or
                   (format-time-string "%d %b %Y" (org-publish-find-date entry project))) ;; use publish-date
                 ;;
                 (if author-and-link
                     (format "  by\n <span class=\"cruise-crew\"> %s\n </span>" author-and-link)
                   "")
                 sanitized-description
                 entry)))))
 #+END_SRC

*** Backend
**** Filter-special-block-functions
#+BEGIN_SRC emacs-lisp
  (defun mon-proxy-articles-special-block-filter (block-data backend info)

    (cond ((eq backend 'html)
           (let ((file (buffer-file-name (current-buffer))))
             (cond ((and file ;; journey
                         (string-match-p "index.org" file)
                         (not (string= (plist-get info :publishing-directory) (mon-publishing-directory))))
                    (mon-local-filter-special-block-index block-data backend info))
                   ((and file ;; harbor
                         (string-match-p "index.org" file)
                         (string= (plist-get info :publishing-directory) (mon-publishing-directory)))
                    (mon-local-filter-special-block-nonindex block-data backend info))
                   ((and file ;; jaunt
                         (not (string-match-p "index.org" file)))
                    (mon-local-filter-special-block-nonindex block-data backend info))
                   )))))

      (eval-after-load 'ox '(add-to-list
                             'org-export-filter-special-block-functions
                             'mon-proxy-articles-special-block-filter))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-special-block-index (block-data backend info)
    (let* ((block-data1 (mon-sanitize-html-tag-hr block-data backend info))
           ;;
           (block-data2 (mon-sanitize-html-tag-end "h1" block-data1 backend info))
           (block-data3 (mon-sanitize-html-tag-beg "h1" block-data2 backend info "cruise-headline"))
           ;;
           (block-data4 (mon-sanitize-html-tag-end "span" block-data3 backend info))
           (block-data5 (mon-sanitize-html-tag-beg "span" block-data4 backend info "cruise-crew"))
           (block-data6 (mon-sanitize-html-tag-beg "span" block-data5 backend info "cruise-date"))
           ;;
           (block-data7 (mon-sanitize-html-tag-end "div" block-data6 backend info))
           (block-data8 (mon-sanitize-html-tag-beg "div" block-data7 backend info))
           )

      (setq block-data block-data8))
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-special-block-nonindex (block-data backend info)
    )
#+END_SRC
***** Tag sanitizers
#+BEGIN_SRC emacs-lisp
  (defun mon-sanitize-html-tag-hr(string backend info)
    (let* ((regexp-pat "&lt;hr /&gt;")
           (replace-pat "<hr />"))
      (replace-regexp-in-string regexp-pat replace-pat string)))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-sanitize-html-tag-end(tag string backend info &optional prefix-pat suffix-pat)
    "Specify tag in string e.g. \"span\""
      (let* ((regexp-pat (concat prefix-pat "&lt;" "/" tag "&gt;" suffix-pat)) ;; (concat prefix-pat "&lt;/span&gt;" suffix-pat))
             (replace-pat (concat "</" tag ">")))
        (replace-regexp-in-string regexp-pat replace-pat string)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-sanitize-html-tag-beg(tag string backend info &optional class-name prefix-pat suffix-pat)
    "Specify tag in string e.g. \"span\""
    (let* ((class-str (and class-name
                           (concat " class=\"" class-name "\"")))
           (regexp-pat (concat prefix-pat (concat "&lt;" tag) class-str "&gt;" suffix-pat))
           (replace-pat (concat "<" tag class-str ">")))
      (replace-regexp-in-string regexp-pat replace-pat string)))
#+END_SRC

**** Filter-final-output-functions
#+BEGIN_SRC emacs-lisp
  (defun mon-proxy-articles-filter-final-output-functions (block-data backend info)
    (cond ((eq backend 'html)
           (let ((file (buffer-file-name (current-buffer))))
             (cond ((and file ;; journey
                         (string-match-p "index.org" file)
                         (not (string= (plist-get info :publishing-directory) (mon-publishing-directory))))
                    (mon-local-filter-final-output-blog-index block-data backend info))
                   ((and file ;; harbor
                         (string-match-p "index.org" file)
                         (string= (plist-get info :publishing-directory) (mon-publishing-directory)))
                    (mon-local-filter-final-output-layout-page block-data backend info))
                   ((and file ;; jaunt
                         (not (string-match-p "index.org" file)))
                    (mon-local-filter-final-output-blog-nonindex block-data backend info)))))))

  (eval-after-load 'ox '(add-to-list
                         'org-export-filter-final-output-functions
                         'mon-proxy-articles-filter-final-output-functions))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-final-output-blog-index (block-data backend info)
    (let* ((div-name "journey")
           (block-data-1 (mon-local-filter-embed-layers-in-contents-div div-name block-data backend info))
           (block-data-2 (mon-local-filter-remove-sitemap-entry-auto-headlines block-data-1 backend info))
           (block-data-3 (mon-local-filter-embed-layers-after-body block-data-2 backend info))
           (block-data-4 (mon-local-filter-rename-head-title-to-unique block-data-3 backend info))
           (block-data-5 (mon-sanitize-html-symbols block-data-4 backend info)))
      (setq block-data block-data-5)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-final-output-layout-page (block-data backend info)
    (let* ((div-name "harbor")
           (block-data-1 (mon-local-filter-embed-layers-in-contents-div div-name block-data backend info))
           (block-data-2 (mon-local-filter-embed-layers-after-body block-data-1 backend info))
           (block-data-3 (mon-local-filter-rename-heading-class-no-author block-data-2 backend info))
           (block-data-4 (mon-local-filter-rename-head-title-to-unique block-data-3 backend info))
           (block-data-5 (mon-sanitize-html-symbols block-data-4 backend info)))
      (setq block-data block-data-5)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-final-output-blog-nonindex (block-data backend info)
    (let* ((div-name "jaunt")
           (block-data-1 (mon-local-filter-embed-layers-in-contents-div div-name block-data backend info))
           (block-data-2 (mon-local-filter-embed-layers-after-body block-data-1 backend info))
           (block-data-3 (mon-local-filter-rename-heading-class block-data-2 backend info))
           (block-data-4 (mon-local-filter-rename-head-title-to-unique block-data-3 backend info))
           (block-data-5 (mon-sanitize-html-symbols block-data-4 backend info)))
      (setq block-data block-data-5)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-embed-layers-in-contents-div (div-name block-data backend info)
    (let* ((block-data-beg
            (when (string-match "[ \t\n]<div id=\"content\">" block-data)
              (replace-regexp-in-string
               "[ \t\n]<div id=\"content\">"
               (format "<!-- preamble -->\n<div class=\"main-deck\">\n <div class=\"%s\">\n\n\n\n" div-name)
               block-data)))
           (block-data-end
            (when (string-match "</div>[ \t\n]*<div id=\"postamble\" class=\"status\">" block-data-beg)
              (replace-regexp-in-string
               "\\(</div>\\)\\([ \t\n]*<div id=\"postamble\" class=\"status\">\\)"
               (format "\n\n\n\n\n </div><!--- %s --->\n\\1<!-- main-deck -->\n\n\n\n\n\\2" div-name)
               block-data-beg))))

      block-data-end))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-remove-sitemap-entry-auto-headlines (block-data backend info)

    (let* ((block-tagstart-trimmed
            (replace-regexp-in-string
             "<div id=\"outline-container-org.*\" class=\"outline-2\">[ \t\n]<h2 id=\"org.*\"><a href=\"DUMMY\">DUMMY</a></h2>[ \t\n]<div class=\"outline-text-2\" id=\"text-org.*\">"
             "\n"
             block-data))
           (block-tag-trimmed
            (replace-regexp-in-string
             "\\(Read more</a>[ \t\n]*<hr />[ \t\n]*</p>[ \t\n]*</div>\\)\\([ \t\n]</div>\\)*"
             "\\1 <!-- wrap-up -->"
             block-tagstart-trimmed))
           (respan-takeaway-section
            (replace-regexp-in-string
             "\\(</p>\\)*[ \t\n]*\\(</div>\\)[ \t\n]*<p>\\([ \t\n]*<a href=\".*.html\">Read more</a>[ \t\n]<hr />\\)[ \t\n]</p>"
             "\\3\n\\1\n\\2 <!-- takeaway -->"
             block-tag-trimmed)))

      respan-takeaway-section))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-embed-layers-after-body (block-data backend info)
    (let* ((block-body-newtag-appended
            (replace-regexp-in-string
             "<body>"
             "<body>\n<div class=\"boat hull\">\n\n"
             block-data))
           (block-body-newtag-prepended
            (replace-regexp-in-string
             "</body>"
             "\n\n</div><!-- boat hull -->\n<body>"
             block-body-newtag-appended)))

      block-body-newtag-prepended))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-rename-heading-class-no-author (block-data backend info)
    (let ((block-data-1
           (replace-regexp-in-string
            "<h1 class=\"title\">\\(.*\\)</h1>"
            "<h1 class=\"course-title\">\\1</h1>\n "
            block-data)))
      block-data-1))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-rename-heading-class (block-data backend info)
    (let ((block-data-1
           (replace-regexp-in-string
            "<h1 class=\"title\">\\(.*\\)</h1>"
             (concat "<h1 class=\"course-title\">\\1</h1>\n " (mon-local-filter-authors-list info))
             block-data)))
      block-data-1))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-rename-head-title-to-unique (block-data backend info)
    (let ((block-data-1
           (replace-regexp-in-string
            "<title>.*</title>"
            (format
             "<title>%s</title>"
             (concat (mon-theme-attributes :mainsail)
                     " : "
                     (mon-theme-attributes :headsail)))
            block-data)))
      block-data-1))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-sanitize-html-symbols (block-data backend info &optional alist)
    (let* ((block-data-< (replace-regexp-in-string  "&lt;" "<" block-data))
           (block-data-> (replace-regexp-in-string  "&gt;" ">" block-data-<))
           )

      block-data->
      ))
#+END_SRC
***** Add author section right after title
#+BEGIN_SRC emacs-lisp
  (defun mon-local-filter-authors-list (info)
    (let* ((f-link (lambda (x) (plist-get (nth 1 x) :raw-link)))
           (f-name (lambda (x) (nth 2 x)))
           (f-name-and-link (lambda (x)
                              (progn (format "<a href=\"%s\">%s</a>"
                                             (funcall f-link x)
                                             (funcall f-name x)))))
           ;;
           (author-property (plist-get info :author))
           ;;
           (author-and-link
            (cond ((null author-property) "Anonymous")
                  ((atom author-property) author-property)
                  ((consp (car author-property))
                   (mapconcat
                    'identity
                    (cl-loop for x in author-property by #'cddr collect (funcall f-name-and-link x))
                    "\n  "))))
           ;;
           (date-property (plist-get info :date)))

      ;;
      ;;nth==  0                                      2
      ;;       ((link (:type https ...) AuthorName1), (link (:type https ...) AuthorName2))
      ;;nth==   0     1                 2              0    1                 2
      ;;

      (cond ((and date-property author-and-link)
             (format "\n<div class=\"wrap-up\">\n <span class=\"cruise-date\"> %s </span>\n <span class=\"cruise-crew\">\n  %s\n </span>\n</div>"
                     (format-time-string "%d %b %Y" (date-to-time (car date-property)))
                     author-and-link))
            ((and date-property (not author-and-link))
             (format "\n<div class=\"wrap-up\">\n <span class=\"cruise-date\"> %s </span>\n</div>"
                     (format-time-string "%d %b %Y" (date-to-time (car date-property)))))
            ((and author-and-link (not date-property))
             (format "\n<div class=\"wrap-up\">\n <span class=\"cruise-crew\">\n  %s\n </span>\n</div>"
                     author-and-link)))))

#+END_SRC

*** Project-alist
**** Utilities
#+BEGIN_SRC emacs-lisp
  (defun mon-publish-alist-name (&optional theme suffix delimiter)
    (let ((sentinel
           (if suffix (concat (or delimiter "-") suffix))))

      (concat "mon" (or delimiter "-") (mon-theme-name theme)
              sentinel)))
#+END_SRC
**** Project alist and components (declarations only)
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist ; (org-publish-project-alist)
        (list))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name) ;; project name generated as mon-<theme>
                     :components (list
                                  (mon-publish-alist-name nil "chunk") ;; default
                                  (mon-publish-alist-name nil "media") ;; default
                                  (mon-publish-alist-name nil "-top") ;; default
                                  ;;-----
                                  (mon-publish-alist-name nil "notes")
                                  (mon-publish-alist-name nil "notes-archive")
                                  )))
#+END_SRC

**** CHUNK
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               ;; Move chunk files, maybe move into
               (list (mon-publish-alist-name nil "chunk") ;; default
                     :base-directory (mon-base-directory (mon-theme-name))
                     :exclued (regexp-opt (list (file-name-nondirectory (directory-file-name (mon-www-publish-directory)))))
                     :base-extension (mon-base-extension)

                     :publishing-directory (mon-publishing-directory (mon-theme-name))
                     :publishing-function 'org-publish-attachment
                     :recursive t
                     ))
#+END_SRC

**** MEDIA
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               ;; Move media files, maybe move into
               (list (mon-publish-alist-name nil "media") ;; default
                     :base-directory (mon-base-directory) ;; (mon-base-directory nil "media")
                     :exclued (regexp-opt (list (file-name-nondirectory (directory-file-name (mon-www-publish-directory)))))
                     :base-extension (mon-base-extension)

                     :publishing-directory (mon-publishing-directory)
                     :publishing-function 'org-publish-attachment
                     :recursive t
                     ))
#+END_SRC

**** TOP
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               ;; Various misc files in the root
               (list (mon-publish-alist-name nil "-top") ;; default
                     :base-directory (mon-base-directory nil "apex")
                     :base-extension "org"

                     :publishing-directory (mon-publishing-directory)
                     :publishing-function '(org-html-publish-to-html)
                     :recursive t

                     :auto-sitemap nil

                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "apex"
                                     (mon-theme-name)
                                     (mon-theme-attributes :mainsail) ;; mainsail/headline @ args: ship-structure
                                     (mon-theme-attributes :headsail)) ;; headsail/headline @ args: ship-structure

                     :html-head-include-default-style nil ;; Disable default css style
                     :html-head-include-scripts nil ;; Disable default javascript
                     :html-head (mon-html-head)
                     ))
#+END_SRC
**** ARTICLES
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name nil "articles")
                     :base-directory (mon-base-directory nil "articles")

                     :publishing-directory (mon-publishing-directory nil "articles")
                     :publishing-function 'org-html-publish-to-html
                     :recursive t


                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "apex"
                                     (mon-theme-name)
                                     (mon-theme-attributes :mainsail) ;; mainsail/headline @ args: ship-structure
                                     (mon-theme-attributes :headsail)) ;; headsail/headline @ args: ship-structure

                     :html-head-include-default-style nil ;; Disable default css style
                     :html-head-include-scripts nil ;; Disable default javascript
                     :html-head (mon-html-head)


                     :auto-sitemap t
                     :sitemap-filename "index.org"
                     :sitemap-function 'mon-sitemap-function-article
                     :sitemap-sort-files 'anti-chronologically
                     :sitemap-format-entry 'mon-format-entry-article
                     ;;
                     :sitemap-style 'list
                     :with-tags nil
                     ))
#+END_SRC
**** NOTES
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name nil "notes")
                     :base-directory (mon-base-directory nil "notes")

                     :publishing-directory (mon-publishing-directory nil "notes")
                     :publishing-function 'org-html-publish-to-html
                     :recursive t
                     :exclude (regexp-opt (list "archive-simple.org" "archive-taglinks.org"))


                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "apex"
                                     (mon-theme-name)
                                     (mon-theme-attributes :mainsail) ;; mainsail/headline @ args: ship-structure
                                     (mon-theme-attributes :headsail)) ;; headsail/headline @ args: ship-structure

                     :html-head-include-default-style nil ;; Disable default css style
                     :html-head-include-scripts nil ;; Disable default javascript
                     :html-head (mon-html-head)


                     :auto-sitemap t
                     :sitemap-filename "index.org"
                     :sitemap-function 'mon-sitemap-function-article
                     :sitemap-sort-files 'anti-chronologically
                     :sitemap-format-entry 'mon-format-entry-article
                     ;;
                     :sitemap-style 'list
                     :with-tags nil
                     ))
#+END_SRC
**** NOTES-ARCHIVE
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name nil "notes-archive")
                     :base-directory (mon-base-directory nil "notes")

                     :publishing-directory (mon-publishing-directory nil "notes")
                     :publishing-function 'org-html-publish-to-html
                     :recursive nil
                     :exclude (regexp-opt (list "index.org"))

                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "apex"
                                     (mon-theme-name)
                                     (mon-theme-attributes :mainsail) ;; mainsail/headline @ args: ship-structure
                                     (mon-theme-attributes :headsail)) ;; headsail/headline @ args: ship-structure

                     :html-head-include-default-style nil ;; Disable default css style
                     :html-head-include-scripts nil ;; Disable default javascript
                     :html-head (mon-html-head)


                     :auto-sitemap nil
                     ;;:sitemap-filename "index.org"
                     ;;:sitemap-function 'mon-sitemap-function-article
                     ;;:sitemap-sort-files 'anti-chronologically
                     ;;:sitemap-format-entry 'mon-format-entry-article
                     ;;;;
                     ;;:sitemap-style 'list
                     :with-tags nil
                     ))
#+END_SRC
* STOCK
** GRAINS
*** APEX
**** TODO index
:PROPERTIES:
:EXPORT_FILE_NAME: STOCK/GRAINS/APEX/index.org
:CUSTOM_ID: AF81B62F-D6C7-4B0D-B7D7-F29891E908AF
:TITLE: Startup page
:SUBTITLE:
:AUTHOR:
:EMAIL:
:CREATE_TIMESTAMP: Mon Nov 19 01:16:46 2018
:STARTUP:
:END:
#+OPTIONS: title:nil toc:nil num:nil
#+begin_takeaway

#+end_takeaway
#+begin_keywords

#+end_keywords
I created this site to somehow convey the gist of asking for help!

I worked as an assistant professor after earning a PhD in Computer Science,
then moved to the corporate world and worked with more than a thousand customers
and assisted them express ideas and collaborate across multiple domains.
While my work primarily focused on assisting clients upfront,
often client themselves offered helping hands added to the continuous efforts made by subordinates,
peers, supervisors, friends, mentors, and above all my loving family members -- they all made the outcomes smooth and possible.

The reward of the journey is bestowed insights which is developed as concise notes for quick 1-2 minute reads.
It will be a great pleasure if you may find useful hints in them for improving your judgement and decision making.

Although key focus is how people interact with each other to realize digital adoptation, please expect the content to vary.
I don't know and understand all or everything and need your help, suggestion, encouragement for improving.
Please don't hesitate to ask questions or send feedback in the comments.


***** COMMENT What you can expect:
- This site is pretty experimental. Please expect the content and frequency to vary.
- Posts are typically 1-2 minute reads. I'm not planning to post large tutorials at this moment.

***** COMMENT Disclaimer:
- The contents are provided "AS IS" basis [experimental and still under development]
- Should you find any issue with the content, please contact m.mesbah.uddin (at) gmail.com
**** policy
***** TODO privacy-policy
:PROPERTIES:
:EXPORT_FILE_NAME: STOCK/GRAINS/APEX/policy/privacy-policy.org
:CUSTOM_ID: 78907087-FFD9-45EE-A8AF-17B524302BCB
:TITLE:    privacy-policy
:SUBTITLE:
:AUTHOR:
:EMAIL:
:CREATE_TIMESTAMP: Thu Nov 22 23:34:56 2018
:STARTUP:
:KEYWORDS:
:END:
#+OPTIONS: toc:nil
#+begin_takeaway

#+end_takeaway
#+begin_keywords

#+end_keywords

***** TODO terms-of-service
:PROPERTIES:
:EXPORT_FILE_NAME: STOCK/GRAINS/APEX/policy/terms-of-service.org
:CUSTOM_ID: 62B5A7BA-21D9-4ECB-9687-B4626AE4BB89
:TITLE:    terms-of-service
:SUBTITLE:
:AUTHOR:
:EMAIL:
:CREATE_TIMESTAMP: Thu Nov 22 23:47:48 2018
:STARTUP:
:KEYWORDS:
:END:
#+OPTIONS: toc:nil
#+begin_takeaway

#+end_takeaway
#+begin_keywords

#+end_keywords

*** ARTICLES
*** NOTES
** CHUNK
*** THEMES
**** POOLE
***** ASSETS
****** CSS
******* style.css syntax.css
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/POOLE/ASSETS/CSS/style.css
:END:
#+BEGIN_SRC css
  /*  (Modified)
   ,*                        ___
   ,*                       /\_ \
   ,*  _____     ___     ___\//\ \      __
   ,* /\ '__`\  / __`\  / __`\\ \ \   /'__`\
   ,* \ \ \_\ \/\ \_\ \/\ \_\ \\_\ \_/\  __/
   ,*  \ \ ,__/\ \____/\ \____//\____\ \____\
   ,*   \ \ \/  \/___/  \/___/ \/____/\/____/
   ,*    \ \_\
   ,*     \/_/
   ,*
   ,* Designed, built, and released under MIT license by @mdo. Learn more at
   ,* https://github.com/poole/poole.
   ,*/
  /*
   ,*
   ,* "variables";
   ,* "base";
   ,* "type";
   ,* "syntax"; (provide in syntax.css)
   ,* "code";
   ,* "layout";
   ,* "masthead";
   ,* "posts";
   ,* "pagination";
   ,* "message";
   ,*/
#+END_SRC

<<Variables>>
#+BEGIN_SRC css
  :root {
    --default-gray-1: #f9f9f9;
    --default-gray-2: #ccc;
    --default-gray-3: #767676;
    --default-4: #515151;
    --default-5: #313131;

    --default-red: #ac4142;
    --default-orange: #d28445;
    --default-yellow: #f4bf75;
    --default-green: #90a959;
    --default-cyan: #75b5aa;
    --default-blue: #268bd2;
    /* --default-blue: #6a9fb5; */
    --default-brown: #8f5536;

    --default-root-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", Arial, sans-serif;
    --default-root-font-size: 16px;
    --default-root-line-height: 1.5;

    --default-body-color: #222; /*#515151;*/
    --default-body-bg: #f8ecc2; /*#fff;*/
    --default-link-color: --default-blue;

    --default-border-color: #e5e5e5;

    --default-large-breakpoint: 38em;
    --default-large-font-size: 20px;

    --default-code-font-family: Menlo, Monaco, "Courier New", monospace;
    --default-code-color: #bf616a;
  }
#+END_SRC

<<base>>
#+BEGIN_SRC css
  /* Body resets
   ,*
   ,* Update the foundational and global aspects of the page.
   ,*/

  /* http://meyerweb.com/eric/tools/css/reset/
     v2.0 | 20110126
     License: none (public domain)
  ,*/

  html, body, div, span, applet, object, iframe,
  h1, h2, h3, h4, h5, h6, p, blockquote, pre,
  a, abbr, acronym, address, big, cite, code,
  del, dfn, em, img, ins, kbd, q, s, samp,
  small, strike, strong, sub, sup, tt, var,
  b, u, i, center,
  dl, dt, dd, ol, ul, li,
  fieldset, form, label, legend,
  table, caption, tbody, tfoot, thead, tr, th, td,
  article, aside, canvas, details, embed,
  figure, figcaption, footer, header, hgroup,
  menu, nav, output, ruby, section, summary,
  time, mark, audio, video {
      margin: 0;
      padding: 0;
      border: 0;
      font-size: 100%;
      font: inherit;
      vertical-align: baseline;
  }
  /* HTML5 display-role reset for older browsers */
  article, aside, details, figcaption, figure,
  footer, header, hgroup, menu, nav, section {
      display: block;
  }
  body {
      line-height: 1;
  }
  ol, ul {
      list-style: none;
  }
  blockquote, q {
      quotes: none;
  }
  blockquote:before, blockquote:after,
  q:before, q:after {
      content: '';
      content: none;
  }
  table {
      border-collapse: collapse;
      border-spacing: 0;
  }

  /* http://meyerweb.com/eric/tools/css/reset/ -- v2.0 | 20110126 -- License: none (public domain) */

  ,* {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
  }

  html {
      font-family: var(--default-root-font-family);
      font-size: var(--default-root-font-size);
      line-height: var(--default-root-line-height);
  }
  /* @media (min-width: var(--default-large-breakpoint)) { */
  @media (min-width: 38em) {
      html {
          font-size: var(--default-large-font-size);
      }
  }


  body {
      color: var(--default-body-color);
      background-color: var(--default-body-bg);
      line-height: var(--default-root-line-height);

      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
  }

  /* No `:visited` state is required by default (browsers will use `a`) */
  a {
      color: var(--default-link-color);
      text-decoration: none;
  }
  /* `:focus` is linked to `:hover` for basic accessibility */
  a:hover,
  a:focus {
      text-decoration: underline;
  }
  a strong {
      color: inherit;
  }



  img {
      display: block;
      max-width: 100%;
      margin: 0 0 1rem;
      border-radius: 5px;
  }

  table {
      margin-bottom: 1rem;
      width: 100%;
      font-size: 85%;
      border: 1px solid #e5e5e5;
  }

  td,
  th {
      padding: .25rem .5rem;
      border: 1px solid #e5e5e5;
  }

  th {
      text-align: left;
  }

  tbody tr:nth-child(odd) td,
  tbody tr:nth-child(odd) th {
      background-color: #f9f9f9;
  }
#+END_SRC

<<type>>
#+BEGIN_SRC css
  /* Typography
   ,*
   ,* Headings, body text, lists, and other misc typographic elements.
   ,*/

  h1, h2, h3, h4, h5, h6 {
      margin-bottom: 0;
      font-weight: 600;
      line-height: 1.25;
      color: #313131;
      text-rendering: optimizeLegibility;
  }

  h1 {
      font-size: 2rem;
  }

  h2 {
      margin-top: 1rem;
      font-size: 1.5rem;
  }

  h3 {
      margin-top: 1.5rem;
      font-size: 1.25rem;
  }

  h4, h5, h6 {
      margin-top: 1rem;
      font-size: 1rem;
  }

  p {
      margin-top: 0;
      margin-bottom: 1rem;
  }

  strong {
      color: #303030;
  }

  ul, ol, dl {
      margin-top: 0;
      margin-bottom: 1rem;
  }

  dt {
      font-weight: bold;
  }

  dd {
      margin-bottom: .5rem;
  }

  hr {
      position: relative;
      margin: 1.5rem 0;
      border: 0;
      border-top: 1px solid #ccc;
      border-bottom: 1px solid #ccc;
  }

  abbr {
      font-size: 85%;
      font-weight: bold;
      color: #555;
      text-transform: uppercase;
  }
  abbr[title] {
      cursor: help;
      border-bottom: 1px dotted #e5e5e5;
  }

  blockquote {
      padding: .5rem 1rem;
      margin: .8rem 0;
      color: #7a7a7a;
      border-left: .25rem solid #e5e5e5;
  }
  blockquote p:last-child {
      margin-bottom: 0;
  }
  @media (min-width: 30em) {
      blockquote {
          padding-right: 5rem;
          padding-left: 1.25rem;
      }
  }



  /* Markdown footnotes
   ,*
   ,* See the example content post for an example.
   ,*/

  /* Footnote number within body text */
  a[href^="#fn:"],

  /* Back to footnote link */
  a[href^="#fnref:"] {
      display: inline-block;
      margin-left: .1rem;
      font-weight: bold;
  }

  /* List of footnotes */
  .footnotes {
      margin-top: 2rem;
      font-size: 85%;
  }

  /* Custom type
   ,*
   ,* Extend paragraphs with `.lead` for larger introductory text.
   ,*/
  .lead {
      font-size: 1.25rem;
      font-weight: 300;
  }

  .outline-2 ul,
  .outline-2 ol,
  .outline-2 dl {
      padding-left: 1.3rem;
      //padding-left:  1.5rem;
      //padding-right: 1.5rem;
      padding-right: auto;
      margin-left: 1.3rem;
      //margin-left: 1.5rem;
      //margin-left:  auto;
      margin-right: auto;

      list-style-type: disc;
  }

#+END_SRC

<<syntax>>
#+BEGIN_SRC css :tangle STOCK/CHUNK/THEMES/POOLE/ASSETS/CSS/syntax.css
  .highlight .hll { background-color: #ffc; }
  .highlight .c { color: #999; } /* Comment */
  .highlight .err { color: #a00; background-color: #faa } /* Error */
  .highlight .k { color: #069; } /* Keyword */
  .highlight .o { color: #555 } /* Operator */
  .highlight .cm { color: #09f; font-style: italic } /* Comment.Multiline */
  .highlight .cp { color: #099 } /* Comment.Preproc */
  .highlight .c1 { color: #999; } /* Comment.Single */
  .highlight .cs { color: #999; } /* Comment.Special */
  .highlight .gd { background-color: #fcc; border: 1px solid #c00 } /* Generic.Deleted */
  .highlight .ge { font-style: italic } /* Generic.Emph */
  .highlight .gr { color: #f00 } /* Generic.Error */
  .highlight .gh { color: #030; } /* Generic.Heading */
  .highlight .gi { background-color: #cfc; border: 1px solid #0c0 } /* Generic.Inserted */
  .highlight .go { color: #aaa } /* Generic.Output */
  .highlight .gp { color: #009; } /* Generic.Prompt */
  .highlight .gs { } /* Generic.Strong */
  .highlight .gu { color: #030; } /* Generic.Subheading */
  .highlight .gt { color: #9c6 } /* Generic.Traceback */
  .highlight .kc { color: #069; } /* Keyword.Constant */
  .highlight .kd { color: #069; } /* Keyword.Declaration */
  .highlight .kn { color: #069; } /* Keyword.Namespace */
  .highlight .kp { color: #069 } /* Keyword.Pseudo */
  .highlight .kr { color: #069; } /* Keyword.Reserved */
  .highlight .kt { color: #078; } /* Keyword.Type */
  .highlight .m { color: #f60 } /* Literal.Number */
  .highlight .s { color: #d44950 } /* Literal.String */
  .highlight .na { color: #4f9fcf } /* Name.Attribute */
  .highlight .nb { color: #366 } /* Name.Builtin */
  .highlight .nc { color: #0a8; } /* Name.Class */
  .highlight .no { color: #360 } /* Name.Constant */
  .highlight .nd { color: #99f } /* Name.Decorator */
  .highlight .ni { color: #999; } /* Name.Entity */
  .highlight .ne { color: #c00; } /* Name.Exception */
  .highlight .nf { color: #c0f } /* Name.Function */
  .highlight .nl { color: #99f } /* Name.Label */
  .highlight .nn { color: #0cf; } /* Name.Namespace */
  .highlight .nt { color: #2f6f9f; } /* Name.Tag */
  .highlight .nv { color: #033 } /* Name.Variable */
  .highlight .ow { color: #000; } /* Operator.Word */
  .highlight .w { color: #bbb } /* Text.Whitespace */
  .highlight .mf { color: #f60 } /* Literal.Number.Float */
  .highlight .mh { color: #f60 } /* Literal.Number.Hex */
  .highlight .mi { color: #f60 } /* Literal.Number.Integer */
  .highlight .mo { color: #f60 } /* Literal.Number.Oct */
  .highlight .sb { color: #c30 } /* Literal.String.Backtick */
  .highlight .sc { color: #c30 } /* Literal.String.Char */
  .highlight .sd { color: #c30; font-style: italic } /* Literal.String.Doc */
  .highlight .s2 { color: #c30 } /* Literal.String.Double */
  .highlight .se { color: #c30; } /* Literal.String.Escape */
  .highlight .sh { color: #c30 } /* Literal.String.Heredoc */
  .highlight .si { color: #a00 } /* Literal.String.Interpol */
  .highlight .sx { color: #c30 } /* Literal.String.Other */
  .highlight .sr { color: #3aa } /* Literal.String.Regex */
  .highlight .s1 { color: #c30 } /* Literal.String.Single */
  .highlight .ss { color: #fc3 } /* Literal.String.Symbol */
  .highlight .bp { color: #366 } /* Name.Builtin.Pseudo */
  .highlight .vc { color: #033 } /* Name.Variable.Class */
  .highlight .vg { color: #033 } /* Name.Variable.Global */
  .highlight .vi { color: #033 } /* Name.Variable.Instance */
  .highlight .il { color: #f60 } /* Literal.Number.Integer.Long */

  .css .o,
  .css .o + .nt,
  .css .nt + .nt { color: #999; }
#+END_SRC

<<code>>
#+BEGIN_SRC css
  /* Code
  ,*
  ,* Inline and block-level code snippets. Includes tweaks to syntax highlighted
  ,* snippets from Pygments/Rouge and Gist embeds.
  ,*/

  code,
  pre {
      font-family: var(--default-code-font-family);
  }

  code {
      padding: .25em .5em;
      font-size: 85%;
      color: var(--default-code-color);
      background-color: #f9f9f9;
      border-radius: 3px;
  }

  pre {
      margin-top: 0;
      margin-bottom: 1rem;
  }

  pre code {
      padding: 0;
      font-size: 100%;
      color: inherit;
      background-color: transparent;
  }


  /* Pygments via Jekyll */
  .highlight {
      padding: 1rem;
      margin-bottom: 1rem;
      font-size: .8rem;
      line-height: 1.4;
      background-color: #f9f9f9;
      border-radius: .25rem;
  }
  .highlight pre {
      margin-bottom: 0;
      overflow-x: auto;
  }
  .highlight .lineno {
      display: inline-block; /* Ensures the null space also isn't selectable */
      padding-right: .75rem;
      padding-left: .25rem;
      color: #999;
      /* Make sure numbers aren't selectable */
      -webkit-user-select: none;
      -moz-user-select: none;
      user-select: none;
  }


  /*
   ,* Gist via GitHub Pages
   ,*
   ,* .gist .gist-file {
   ,*   font-family: Menlo, Monaco, "Courier New", monospace !important;
   ,* }
   ,*
   ,* .gist .markdown-body {
   ,*   padding: 15px;
   ,* }
   ,*
   ,* .gist pre {
   ,*   padding: 0;
   ,*   background-color: transparent;
   ,* }
   ,*
   ,* .gist .gist-file .gist-data {
   ,*   font-size: .8rem !important;
   ,*   line-height: 1.4;
   ,* }
   ,*
   ,* .gist code {
   ,*   padding: 0;
   ,*   color: inherit;
   ,*   background-color: transparent;
   ,*   border-radius: 0;
   ,* }
   ,*/
#+END_SRC

<<layout>>
#+BEGIN_SRC css
  /* Layout
   ,*
   ,* Styles for managing the structural hierarchy of the site.
   ,*/
  .boat,
  .container {
      max-width: 38rem;
      padding-left:  1.5rem;
      padding-right: 1.5rem;
      margin-left:  auto;
      margin-right: auto;
  }


  .main-deck {
      font-size: 100%;
      margin:0;
      margin-left: 0.3rem;
      margin-right: 0.3rem;
      max-width: 32rem;
      /* padding-left: 0; */
      /* padding-right:0; */
      /* margin-left:  auto; */
      /* margin-right: auto; */
  }
  /*
  .main-deck p {
      text-align: justify;
  }
  .main-deck dd {
      text-align: justify;
  }
  .main-deck h1 {
      font-size: 1.5em;
  }
  .main-deck h2 {
      margin-top: 1.7rem;
      font-size: 1.25rem;
  }
  .main-deck h3,
  .main-deck h4,
  .main-deck h5,
  .main-deck h6 {
      margin-top: 1rem;
      font-size: 1rem;
  }
  ,*/

  footer {
      margin-bottom: 2rem;
      color: var(--default-body-color);
      background-color: var(--default-body-bg);
  }
#+END_SRC

<<masthead>>
#+BEGIN_SRC css
  /* Masthead
   ,*
   ,* Super small header above the content for site name and short description.
   ,*/

  .masthead {
      padding-top:    2rem;
      padding-bottom: 1rem;
      margin-bottom: 1rem;

      border-bottom: 3px solid #ccc;
  }
  .masthead a {
      color: #202020;
  }
  .masthead h3 {
      margin-top:0;
      margin-bottom:0;
  }
  .masthead ul {
      margin-bottom:0;
  }

  .masthead small {
      vertical-align: text-top;
      font-size: 90%;
      font-weight: 400;
      color: #909090;
      letter-spacing: 0;
  }

  .masthead .mainsail,
  .masthead-title {
      margin-top: 0;
      margin-bottom: 0;
      color: var(--default-gray-4);
  }
  .masthead .mainsail a,
  .masthead-title a {
      color: inherit;
  }
  .masthead .headsail small,
  .masthead-title small {
      font-size: 75%;
      font-weight: 400;
      opacity: .5;
  }
  .masthead .compass {
      list-style: none;
      padding-left: 0;
      padding-right: 1rem;
      width:inherit;
  }
  .masthead .compass li {
      font-size:120%;
      width: inherit;
      margin-top:.8em;
  }
#+END_SRC

<<posts>>
#+BEGIN_SRC css
  /* Posts and pages
    ,*
    ,* Each post is wrapped in `.post` and is used on default and post layouts. Each
    ,* page is wrapped in `.page` and is only used on the page layout.
    ,*/

   .journey h1 {
       font-size: 1.5rem;
   }

   .harbor,
   .jaunt,
   .page,
   .post {
       margin-bottom: 4em;
   }
   .page li + li,
   .post li + li {
       margin-top: .25rem;
   }

   .wrap-up {
       padding: 0;
       margin: 0;
       margin-bottom: 0;
   }
   .wrap-up span {
       display: inline-block;
   }
  .wrap-up p {
      margin-top: 0;
      margin-bottom: 0;
  }

   /* Blog post or page title */
   .course-title,
   .cruise-headline,
   .cruise-headline a,
   .page-title,
   .post-title,
   .post-title a {
       color: #303030;
   }
   .course-title,
   .cruise-headline,
   .page-title,
   .post-title {
       margin-top: 0;
   }

   /* Meta data line below post title */
   .cruise-date,
   .post-date {
       display: block;
       margin-top: -.5rem;
       margin-bottom: 1rem;
       color: #9a9a9a;
   }

#+END_SRC

<<comments-and-tags>>
#+BEGIN_SRC css
  /* Tags */
  @media (min-width: 30em) {
      .anchor-tags {
          float: right;
      }
  }

  /* -- comments/feedback region -- */
  .follow-me-twitter,
  .follow-me-github {
      height: 28px;
      width: 157px;
      margin: 0.5em 0;
  }

  /*.gad {
    width: 100%;
    height: 100px;
  }
  ,*/

  .stern {
      position:absolute;
      bottom:3rem;
  }

  .se-flair {
      padding: 0;
      margin: 0;
  }
  .pay-me-gratipay {
      margin: 0.5em 0;
  }
  .pay-me-gratipay img {
      height: 26.5px;
      padding: 0;
      margin: 0;
  }

  /**/
  .stern-x {
      absolute;
      bottom: 1rem;
  }

  .share-me {
      //width: 60%;
      //float:left;
      font-family: Arial, Helvetica, sans-serif;
      color: var(--default-body-color);
      background-color: var(--default-body-bg);
  }
  .share-me a:hover {
      text-decoration: none;
      color: white;
  }
  .gecko {
      //width: 100%;
      //float: right;
      font-family: Arial, Helvetica, sans-serif;
      color: var(--default-body-color);
      background-color: var(--default-body-bg);
  }
  .selfie {
      width: 100%;
      float: center;//left;
      font-family: Arial, Helvetica, sans-serif;
      color: var(--default-body-color);
      background-color: #f0f0f0;//var(--default-body-bg);
  }
  .feedback {
      width: 100%;
      float: left;
      font-family: Arial, Helvetica, sans-serif;
      color: var(--default-body-color);
      background-color: var(--default-body-bg);
  }
  .feedback a {
      color: var(--default-orange);
  }
  .fb-comments, .fb-comments span, .fb-comments iframe {
      min-width: 100% !important;
      max-width: 100% !important;
  }
  .fb-comments a, .fb-comments span a, .fb-comments iframe a {
      color: var(--default-orange) !important;

  }
#+END_SRC

<<related-posts>>
#+BEGIN_SRC css
  /* Related posts */
  .related {
      padding-top: 2rem;
      padding-bottom: 2rem;
      margin-bottom: 2rem;
      border-top: 1px solid #eee;
      border-bottom: 1px solid #eee;
  }

  .related-posts {
      padding-left: 0;
      list-style: none;
  }
  .related-posts h3 {
      margin-top: 0;
  }
  .related-posts li {
  }
  .related-posts li small {
      font-size: 75%;
      color: #999;
  }
  .related-posts li a:hover {
      color: #268bd2;
      text-decoration: none;
  }
  .related-posts li a:hover small {
      color: inherit;
  }
#+END_SRC

<<pagination>>
#+BEGIN_SRC css
  /* Pagination
  ,*
  ,* Super lightweight (HTML-wise) blog pagination. `span`s are provide for when
  ,* there are no more previous or next posts to show.
  ,*/
  .pagination {
      overflow: hidden; /* clearfix */
      margin: 0 -1.5rem 1rem;
      color: #ccc;
      text-align: center;
  }

  /* Pagination items can be `span`s or `a`s */
  .pagination-item {
      display: block;
      padding: 1rem;
      border: solid #eee;
      border-width: 1px 0;
  }
  .pagination-item:first-child {
      margin-bottom: -1px;
  }


  /* Only provide a hover state for linked pagination items */
  a.pagination-item:hover {
      background-color: #f5f5f5;
  }


  @media (min-width: 30em) {
      .pagination {
          margin: 3rem 0;
      }

      .pagination-item {
          float: left;
          width: 50%;
          border-width: 1px;
      }
      .pagination-item:first-child {
          margin-bottom: 0;
          border-top-left-radius:    4px;
          border-bottom-left-radius: 4px;
      }
      .pagination-item:last-child {
          margin-left: -1px;
          border-top-right-radius:    4px;
          border-bottom-right-radius: 4px;
      }

  }
#+END_SRC

<<message>>
#+BEGIN_SRC css
  /* Messages
   ,*
   ,* Show alert messages to users. You may add it to single elements like a `<p>`,
   ,* or to a parent if there are multiple elements to show.
   ,*/
  .message {
      margin-bottom: 1rem;
      padding: 1rem;
      color: #717171;
      background-color: #f9f9f9;
  }
#+END_SRC
**** PROXY
***** ASSETS
****** CSS
******* orgstyle.css
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/orgstyle.css
:END:
******** normalize.css v8.0.0
#+BEGIN_SRC css
  /*
  normalize.css: The MIT License (MIT)

  Copyright © Nicolas Gallagher and Jonathan Neal

  Permission is hereby granted, free of charge, to any person obtaining a copy of
  this software and associated documentation files (the "Software"), to deal in
  the Software without restriction, including without limitation the rights to
  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  of the Software, and to permit persons to whom the Software is furnished to do
  so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  ,*/
#+END_SRC
#+BEGIN_SRC css
  /*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */

  /* Document
     ========================================================================== */

  /**
   ,* 1. Correct the line height in all browsers.
   ,* 2. Prevent adjustments of font size after orientation changes in iOS.
   ,*/

  html {
    line-height: 1.15; /* 1 */
    -webkit-text-size-adjust: 100%; /* 2 */
  }

  /* Sections
     ========================================================================== */

  /**
   ,* Remove the margin in all browsers.
   ,*/

  body {
    margin: 0;
  }

  /**
   ,* Correct the font size and margin on `h1` elements within `section` and
   ,* `article` contexts in Chrome, Firefox, and Safari.
   ,*/

  h1 {
    font-size: 2em;
    margin: 0.67em 0;
  }

  /* Grouping content
     ========================================================================== */

  /**
   ,* 1. Add the correct box sizing in Firefox.
   ,* 2. Show the overflow in Edge and IE.
   ,*/

  hr {
    box-sizing: content-box; /* 1 */
    height: 0; /* 1 */
    overflow: visible; /* 2 */
  }

  /**
   ,* 1. Correct the inheritance and scaling of font size in all browsers.
   ,* 2. Correct the odd `em` font sizing in all browsers.
   ,*/

  pre {
    font-family: monospace, monospace; /* 1 */
    font-size: 1em; /* 2 */
  }

  /* Text-level semantics
     ========================================================================== */

  /**
   ,* Remove the gray background on active links in IE 10.
   ,*/

  a {
    background-color: transparent;
  }

  /**
   ,* 1. Remove the bottom border in Chrome 57-
   ,* 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
   ,*/

  abbr[title] {
    border-bottom: none; /* 1 */
    text-decoration: underline; /* 2 */
    text-decoration: underline dotted; /* 2 */
  }

  /**
   ,* Add the correct font weight in Chrome, Edge, and Safari.
   ,*/

  b,
  strong {
    font-weight: bolder;
  }

  /**
   ,* 1. Correct the inheritance and scaling of font size in all browsers.
   ,* 2. Correct the odd `em` font sizing in all browsers.
   ,*/

  code,
  kbd,
  samp {
    font-family: monospace, monospace; /* 1 */
    font-size: 1em; /* 2 */
  }

  /**
   ,* Add the correct font size in all browsers.
   ,*/

  small {
    font-size: 80%;
  }

  /**
   ,* Prevent `sub` and `sup` elements from affecting the line height in
   ,* all browsers.
   ,*/

  sub,
  sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }

  sub {
    bottom: -0.25em;
  }

  sup {
    top: -0.5em;
  }

  /* Embedded content
     ========================================================================== */

  /**
   ,* Remove the border on images inside links in IE 10.
   ,*/

  img {
    border-style: none;
  }

  /* Forms
     ========================================================================== */

  /**
   ,* 1. Change the font styles in all browsers.
   ,* 2. Remove the margin in Firefox and Safari.
   ,*/

  button,
  input,
  optgroup,
  select,
  textarea {
    font-family: inherit; /* 1 */
    font-size: 100%; /* 1 */
    line-height: 1.15; /* 1 */
    margin: 0; /* 2 */
  }

  /**
   ,* Show the overflow in IE.
   ,* 1. Show the overflow in Edge.
   ,*/

  button,
  input { /* 1 */
    overflow: visible;
  }

  /**
   ,* Remove the inheritance of text transform in Edge, Firefox, and IE.
   ,* 1. Remove the inheritance of text transform in Firefox.
   ,*/

  button,
  select { /* 1 */
    text-transform: none;
  }

  /**
   ,* Correct the inability to style clickable types in iOS and Safari.
   ,*/

  button,
  [type="button"],
  [type="reset"],
  [type="submit"] {
    -webkit-appearance: button;
  }

  /**
   ,* Remove the inner border and padding in Firefox.
   ,*/

  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0;
  }

  /**
   ,* Restore the focus styles unset by the previous rule.
   ,*/

  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText;
  }

  /**
   ,* Correct the padding in Firefox.
   ,*/

  fieldset {
    padding: 0.35em 0.75em 0.625em;
  }

  /**
   ,* 1. Correct the text wrapping in Edge and IE.
   ,* 2. Correct the color inheritance from `fieldset` elements in IE.
   ,* 3. Remove the padding so developers are not caught out when they zero out
   ,*    `fieldset` elements in all browsers.
   ,*/

  legend {
    box-sizing: border-box; /* 1 */
    color: inherit; /* 2 */
    display: table; /* 1 */
    max-width: 100%; /* 1 */
    padding: 0; /* 3 */
    white-space: normal; /* 1 */
  }

  /**
   ,* Add the correct vertical alignment in Chrome, Firefox, and Opera.
   ,*/

  progress {
    vertical-align: baseline;
  }

  /**
   ,* Remove the default vertical scrollbar in IE 10+.
   ,*/

  textarea {
    overflow: auto;
  }

  /**
   ,* 1. Add the correct box sizing in IE 10.
   ,* 2. Remove the padding in IE 10.
   ,*/

  [type="checkbox"],
  [type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
  }

  /**
   ,* Correct the cursor style of increment and decrement buttons in Chrome.
   ,*/

  [type="number"]::-webkit-inner-spin-button,
  [type="number"]::-webkit-outer-spin-button {
    height: auto;
  }

  /**
   ,* 1. Correct the odd appearance in Chrome and Safari.
   ,* 2. Correct the outline style in Safari.
   ,*/

  [type="search"] {
    -webkit-appearance: textfield; /* 1 */
    outline-offset: -2px; /* 2 */
  }

  /**
   ,* Remove the inner padding in Chrome and Safari on macOS.
   ,*/

  [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  /**
   ,* 1. Correct the inability to style clickable types in iOS and Safari.
   ,* 2. Change font properties to `inherit` in Safari.
   ,*/

  ::-webkit-file-upload-button {
    -webkit-appearance: button; /* 1 */
    font: inherit; /* 2 */
  }

  /* Interactive
     ========================================================================== */

  /*
   ,* Add the correct display in Edge, IE 10+, and Firefox.
   ,*/

  details {
    display: block;
  }

  /*
   ,* Add the correct display in all browsers.
   ,*/

  summary {
    display: list-item;
  }

  /* Misc
     ========================================================================== */

  /**
   ,* Add the correct display in IE 10+.
   ,*/

  template {
    display: none;
  }

  /**
   ,* Add the correct display in IE 10.
   ,*/

  [hidden] {
    display: none;
  }
#+END_SRC
# normalize.css v8.0.0 ends here
******** normalize.css v4.1.1
#+BEGIN_SRC css :tangle no
  /*
  normalize.css: The MIT License (MIT)

  Copyright © Nicolas Gallagher and Jonathan Neal

  Permission is hereby granted, free of charge, to any person obtaining a copy of
  this software and associated documentation files (the "Software"), to deal in
  the Software without restriction, including without limitation the rights to
  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  of the Software, and to permit persons to whom the Software is furnished to do
  so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  ,*/
#+END_SRC
#+BEGIN_SRC css :tangle no
  /*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */

  /**
   ,* 1. Change the default font family in all browsers (opinionated).
   ,* 2. Correct the line height in all browsers.
   ,* 3. Prevent adjustments of font size after orientation changes in IE and iOS.
   ,*/

  html {
    font-family: sans-serif; /* 1 */
    line-height: 1.15; /* 2 */
    -ms-text-size-adjust: 100%; /* 3 */
    -webkit-text-size-adjust: 100%; /* 3 */
  }

  /**
   ,* Remove the margin in all browsers (opinionated).
   ,*/

  body {
    margin: 0;
  }

  /* HTML5 display definitions
     ========================================================================== */

  /**
   ,* Add the correct display in IE 9-.
   ,* 1. Add the correct display in Edge, IE, and Firefox.
   ,* 2. Add the correct display in IE.
   ,*/

  article,
  aside,
  details, /* 1 */
  figcaption,
  figure,
  footer,
  header,
  main, /* 2 */
  menu,
  nav,
  section,
  summary { /* 1 */
    display: block;
  }

  /**
   ,* Add the correct display in IE 9-.
   ,*/

  audio,
  canvas,
  progress,
  video {
    display: inline-block;
  }

  /**
   ,* Add the correct display in iOS 4-7.
   ,*/

  audio:not([controls]) {
    display: none;
    height: 0;
  }

  /**
   ,* Add the correct vertical alignment in Chrome, Firefox, and Opera.
   ,*/

  progress {
    vertical-align: baseline;
  }

  /**
   ,* Add the correct display in IE 10-.
   ,* 1. Add the correct display in IE.
   ,*/

  template, /* 1 */
  [hidden] {
    display: none;
  }

  /* Links
     ========================================================================== */

  /**
   ,* 1. Remove the gray background on active links in IE 10.
   ,* 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
   ,*/

  a {
    background-color: transparent; /* 1 */
    -webkit-text-decoration-skip: objects; /* 2 */
  }

  /**
   ,* Remove the outline on focused links when they are also active or hovered
   ,* in all browsers (opinionated).
   ,*/

  a:active,
  a:hover {
    outline-width: 0;
  }

  /* Text-level semantics
     ========================================================================== */

  /**
   ,* 1. Remove the bottom border in Firefox 39-.
   ,* 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
   ,*/

  abbr[title] {
    border-bottom: none; /* 1 */
    text-decoration: underline; /* 2 */
    text-decoration: underline dotted; /* 2 */
  }

  /**
   ,* Prevent the duplicate application of `bolder` by the next rule in Safari 6.
   ,*/

  b,
  strong {
    font-weight: inherit;
  }

  /**
   ,* Add the correct font weight in Chrome, Edge, and Safari.
   ,*/

  b,
  strong {
    font-weight: bolder;
  }

  /**
   ,* Add the correct font style in Android 4.3-.
   ,*/

  dfn {
    font-style: italic;
  }

  /**
   ,* Correct the font size and margin on `h1` elements within `section` and
   ,* `article` contexts in Chrome, Firefox, and Safari.
   ,*/

  h1 {
    font-size: 2em;
    margin: 0.67em 0;
  }

  /**
   ,* Add the correct background and color in IE 9-.
   ,*/

  mark {
    background-color: #ff0;
    color: #000;
  }

  /**
   ,* Add the correct font size in all browsers.
   ,*/

  small {
    font-size: 80%;
  }

  /**
   ,* Prevent `sub` and `sup` elements from affecting the line height in
   ,* all browsers.
   ,*/

  sub,
  sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }

  sub {
    bottom: -0.25em;
  }

  sup {
    top: -0.5em;
  }

  /* Embedded content
     ========================================================================== */

  /**
   ,* Remove the border on images inside links in IE 10-.
   ,*/

  img {
    border-style: none;
  }

  /**
   ,* Hide the overflow in IE.
   ,*/

  svg:not(:root) {
    overflow: hidden;
  }

  /* Grouping content
     ========================================================================== */

  /**
   ,* 1. Correct the inheritance and scaling of font size in all browsers.
   ,* 2. Correct the odd `em` font sizing in all browsers.
   ,*/

  code,
  kbd,
  pre,
  samp {
    font-family: monospace, monospace; /* 1 */
    font-size: 1em; /* 2 */
  }

  /**
   ,* Add the correct margin in IE 8.
   ,*/

  figure {
    margin: 1em 40px;
  }

  /**
   ,* 1. Add the correct box sizing in Firefox.
   ,* 2. Show the overflow in Edge and IE.
   ,*/

  hr {
    box-sizing: content-box; /* 1 */
    height: 0; /* 1 */
    overflow: visible; /* 2 */
  }

  /* Forms
     ========================================================================== */

  /**
   ,* 1. Change font properties to `inherit` in all browsers (opinionated).
   ,* 2. Remove the margin in Firefox and Safari.
   ,*/

  button,
  input,
  optgroup,
  select,
  textarea {
    font: inherit; /* 1 */
    margin: 0; /* 2 */
  }

  /**
   ,* Restore the font weight unset by the previous rule.
   ,*/

  optgroup {
    font-weight: bold;
  }

  /**
   ,* Show the overflow in IE.
   ,* 1. Show the overflow in Edge.
   ,*/

  button,
  input { /* 1 */
    overflow: visible;
  }

  /**
   ,* Remove the inheritance of text transform in Edge, Firefox, and IE.
   ,* 1. Remove the inheritance of text transform in Firefox.
   ,*/

  button,
  select { /* 1 */
    text-transform: none;
  }

  /**
   ,* 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
   ,*    controls in Android 4.
   ,* 2. Correct the inability to style clickable types in iOS and Safari.
   ,*/

  button,
  html [type="button"], /* 1 */
  [type="reset"],
  [type="submit"] {
    -webkit-appearance: button; /* 2 */
  }

  /**
   ,* Remove the inner border and padding in Firefox.
   ,*/

  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0;
  }

  /**
   ,* Restore the focus styles unset by the previous rule.
   ,*/

  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText;
  }

  /**
   ,* Change the border, margin, and padding in all browsers (opinionated).
   ,*/

  fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
  }

  /**
   ,* 1. Correct the text wrapping in Edge and IE.
   ,* 2. Correct the color inheritance from `fieldset` elements in IE.
   ,* 3. Remove the padding so developers are not caught out when they zero out
   ,*    `fieldset` elements in all browsers.
   ,*/

  legend {
    box-sizing: border-box; /* 1 */
    color: inherit; /* 2 */
    display: table; /* 1 */
    max-width: 100%; /* 1 */
    padding: 0; /* 3 */
    white-space: normal; /* 1 */
  }

  /**
   ,* Remove the default vertical scrollbar in IE.
   ,*/

  textarea {
    overflow: auto;
  }

  /**
   ,* 1. Add the correct box sizing in IE 10-.
   ,* 2. Remove the padding in IE 10-.
   ,*/

  [type="checkbox"],
  [type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
  }

  /**
   ,* Correct the cursor style of increment and decrement buttons in Chrome.
   ,*/

  [type="number"]::-webkit-inner-spin-button,
  [type="number"]::-webkit-outer-spin-button {
    height: auto;
  }

  /**
   ,* 1. Correct the odd appearance in Chrome and Safari.
   ,* 2. Correct the outline style in Safari.
   ,*/

  [type="search"] {
    -webkit-appearance: textfield; /* 1 */
    outline-offset: -2px; /* 2 */
  }

  /**
   ,* Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
   ,*/

  [type="search"]::-webkit-search-cancel-button,
  [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  /**
   ,* Correct the text style of placeholders in Chrome, Edge, and Safari.
   ,*/

  ::-webkit-input-placeholder {
    color: inherit;
    opacity: 0.54;
  }

  /**
   ,* 1. Correct the inability to style clickable types in iOS and Safari.
   ,* 2. Change font properties to `inherit` in Safari.
   ,*/

  ::-webkit-file-upload-button {
    -webkit-appearance: button; /* 1 */
    font: inherit; /* 2 */
  }
#+END_SRC
# normalize.css v4.1.1 ends here

******** hmtlize.css
#+BEGIN_SRC css
  /* Generated from (org-html-htmlize-generate-css) with minimum
     packages loaded and default light theme */

  .org-bold {
      /* bold */
      font-weight: bold;
  }
  .org-bold-italic {
      /* bold-italic */
      font-weight: bold;
      font-style: italic;
  }
  .org-border {
  }
  .org-buffer-menu-buffer {
      /* buffer-menu-buffer */
      font-weight: bold;
  }
  .org-builtin {
      /* font-lock-builtin-face */
      color: #483d8b;
  }
  .org-button {
      /* button */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-calendar-month-header {
      /* calendar-month-header */
      color: #0000ff;
  }
  .org-calendar-today {
      /* calendar-today */
      text-decoration: underline;
  }
  .org-calendar-weekday-header {
      /* calendar-weekday-header */
      color: #008b8b;
  }
  .org-calendar-weekend-header {
      /* calendar-weekend-header */
      color: #b22222;
  }
  .org-comint-highlight-input {
      /* comint-highlight-input */
      font-weight: bold;
  }
  .org-comint-highlight-prompt {
      /* comint-highlight-prompt */
      color: #0000cd;
  }
  .org-comment {
      /* font-lock-comment-face */
      color: #b22222;
  }
  .org-comment-delimiter {
      /* font-lock-comment-delimiter-face */
      color: #b22222;
  }
  .org-constant {
      /* font-lock-constant-face */
      color: #008b8b;
  }
  .org-diary {
      /* diary */
      color: #ff0000;
  }
  .org-doc {
      /* font-lock-doc-face */
      color: #8b2252;
  }
  .org-error {
      /* error */
      color: #ff0000;
      font-weight: bold;
  }
  .org-escape-glyph {
      /* escape-glyph */
      color: #a52a2a;
  }
  .org-file-name-shadow {
      /* file-name-shadow */
      color: #7f7f7f;
  }
  .org-fixed-pitch {
  }
  .org-fringe {
      /* fringe */
      background-color: #f2f2f2;
  }
  .org-function-name {
      /* font-lock-function-name-face */
      color: #0000ff;
  }
  .org-glyphless-char {
      /* glyphless-char */
      font-size: 60%;
  }
  .org-header-line {
      /* header-line */
      color: #333333;
      background-color: #e5e5e5;
  }
  .org-help-argument-name {
      /* help-argument-name */
      font-style: italic;
  }
  .org-highlight {
      /* highlight */
      background-color: #b4eeb4;
  }
  .org-holiday {
      /* holiday */
      background-color: #ffc0cb;
  }
  .org-info-header-node {
      /* info-header-node */
      color: #a52a2a;
      font-weight: bold;
      font-style: italic;
  }
  .org-info-header-xref {
      /* info-header-xref */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-info-index-match {
      /* info-index-match */
      background-color: #ffff00;
  }
  .org-info-menu-header {
      /* info-menu-header */
      font-weight: bold;
  }
  .org-info-menu-star {
      /* info-menu-star */
      color: #ff0000;
  }
  .org-info-node {
      /* info-node */
      color: #a52a2a;
      font-weight: bold;
      font-style: italic;
  }
  .org-info-title-1 {
      /* info-title-1 */
      font-size: 172%;
      font-weight: bold;
  }
  .org-info-title-2 {
      /* info-title-2 */
      font-size: 144%;
      font-weight: bold;
  }
  .org-info-title-3 {
      /* info-title-3 */
      font-size: 120%;
      font-weight: bold;
  }
  .org-info-title-4 {
      /* info-title-4 */
      font-weight: bold;
  }
  .org-info-xref {
      /* info-xref */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-italic {
      /* italic */
      font-style: italic;
  }
  .org-keyword {
      /* font-lock-keyword-face */
      color: #a020f0;
  }
  .org-lazy-highlight {
      /* lazy-highlight */
      background-color: #afeeee;
  }
  .org-link {
      /* link */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-link-visited {
      /* link-visited */
      color: #8b008b;
      text-decoration: underline;
  }
  .org-makefile-makepp-perl {
      /* makefile-makepp-perl */
      background-color: #bfefff;
  }
  .org-makefile-shell {
  }
  .org-makefile-space {
      /* makefile-space */
      background-color: #ff69b4;
  }
  .org-makefile-targets {
      /* makefile-targets */
      color: #0000ff;
  }
  .org-match {
      /* match */
      background-color: #ffff00;
  }
  .org-negation-char {
  }
  .org-next-error {
      /* next-error */
      background-color: gtk_selection_bg_color;
  }
  .org-nobreak-space {
      /* nobreak-space */
      color: #a52a2a;
      text-decoration: underline;
  }
  .org-org-agenda-calendar-event {
      /* org-agenda-calendar-event */
      color: #000000;
      background-color: #ffffff;
  }
  .org-org-agenda-calendar-sexp {
      /* org-agenda-calendar-sexp */
      color: #000000;
      background-color: #ffffff;
  }
  .org-org-agenda-clocking {
      /* org-agenda-clocking */
      background-color: #ffff00;
  }
  .org-org-agenda-column-dateline {
      /* org-agenda-column-dateline */
      background-color: #e5e5e5;
  }
  .org-org-agenda-current-time {
      /* org-agenda-current-time */
      color: #b8860b;
  }
  .org-org-agenda-date {
      /* org-agenda-date */
      color: #0000ff;
  }
  .org-org-agenda-date-today {
      /* org-agenda-date-today */
      color: #0000ff;
      font-weight: bold;
      font-style: italic;
  }
  .org-org-agenda-date-weekend {
      /* org-agenda-date-weekend */
      color: #0000ff;
      font-weight: bold;
  }
  .org-org-agenda-diary {
      /* org-agenda-diary */
      color: #000000;
      background-color: #ffffff;
  }
  .org-org-agenda-dimmed-todo {
      /* org-agenda-dimmed-todo-face */
      color: #7f7f7f;
  }
  .org-org-agenda-done {
      /* org-agenda-done */
      color: #228b22;
  }
  .org-org-agenda-filter-category {
      /* org-agenda-filter-category */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-agenda-filter-effort {
      /* org-agenda-filter-effort */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-agenda-filter-regexp {
      /* org-agenda-filter-regexp */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-agenda-filter-tags {
      /* org-agenda-filter-tags */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-agenda-restriction-lock {
      /* org-agenda-restriction-lock */
      background-color: #eeeeee;
  }
  .org-org-agenda-structure {
      /* org-agenda-structure */
      color: #0000ff;
  }
  .org-org-archived {
      /* org-archived */
      color: #7f7f7f;
  }
  .org-org-block {
      /* org-block */
      color: #7f7f7f;
  }
  .org-org-block-begin-line {
      /* org-block-begin-line */
      color: #b22222;
  }
  .org-org-block-end-line {
      /* org-block-end-line */
      color: #b22222;
  }
  .org-org-checkbox {
      /* org-checkbox */
      font-weight: bold;
  }
  .org-org-checkbox-statistics-done {
      /* org-checkbox-statistics-done */
      color: #228b22;
      font-weight: bold;
  }
  .org-org-checkbox-statistics-todo {
      /* org-checkbox-statistics-todo */
      color: #ff0000;
      font-weight: bold;
  }
  .org-org-clock-overlay {
      /* org-clock-overlay */
      color: #000000;
      background-color: #d3d3d3;
  }
  .org-org-code {
      /* org-code */
      color: #7f7f7f;
  }
  .org-org-column {
      /* org-column */
      background-color: #e5e5e5;
  }
  .org-org-column-title {
      /* org-column-title */
      background-color: #e5e5e5;
      font-weight: bold;
      text-decoration: underline;
  }
  .org-org-date {
      /* org-date */
      color: #a020f0;
      text-decoration: underline;
  }
  .org-org-date-selected {
      /* org-date-selected */
      color: #ff0000;
  }
  .org-org-default {
      /* org-default */
      color: #000000;
      background-color: #ffffff;
  }
  .org-org-document-info {
      /* org-document-info */
      color: #191970;
  }
  .org-org-document-info-keyword {
      /* org-document-info-keyword */
      color: #7f7f7f;
  }
  .org-org-document-title {
      /* org-document-title */
      color: #191970;
      font-weight: bold;
  }
  .org-org-done {
      /* org-done */
      color: #228b22;
      font-weight: bold;
  }
  .org-org-drawer {
      /* org-drawer */
      color: #0000ff;
  }
  .org-org-ellipsis {
      /* org-ellipsis */
      color: #b8860b;
      text-decoration: underline;
  }
  .org-org-footnote {
      /* org-footnote */
      color: #a020f0;
      text-decoration: underline;
  }
  .org-org-formula {
      /* org-formula */
      color: #b22222;
  }
  .org-org-headline-done {
      /* org-headline-done */
      color: #bc8f8f;
  }
  .org-org-hide {
      /* org-hide */
      color: #ffffff;
  }
  .org-org-latex-and-related {
      /* org-latex-and-related */
      color: #8b4513;
  }
  .org-org-level-1 {
      /* org-level-1 */
      color: #0000ff;
  }
  .org-org-level-2 {
      /* org-level-2 */
      color: #a0522d;
  }
  .org-org-level-3 {
      /* org-level-3 */
      color: #a020f0;
  }
  .org-org-level-4 {
      /* org-level-4 */
      color: #b22222;
  }
  .org-org-level-5 {
      /* org-level-5 */
      color: #228b22;
  }
  .org-org-level-6 {
      /* org-level-6 */
      color: #008b8b;
  }
  .org-org-level-7 {
      /* org-level-7 */
      color: #483d8b;
  }
  .org-org-level-8 {
      /* org-level-8 */
      color: #8b2252;
    }
  .org-org-link {
      /* org-link */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-org-list-dt {
      /* org-list-dt */
      font-weight: bold;
  }
  .org-org-macro {
      /* org-macro */
      color: #8b4513;
  }
  .org-org-meta-line {
      /* org-meta-line */
      color: #b22222;
  }
  .org-org-mode-line-clock {
      /* org-mode-line-clock */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-mode-line-clock-overrun {
      /* org-mode-line-clock-overrun */
      color: #000000;
      background-color: #ff0000;
  }
  .org-org-priority {
      /* org-priority */
      color: #a020f0;
  }
  .org-org-property-value {
  }
  .org-org-quote {
      /* org-quote */
      color: #7f7f7f;
  }
  .org-org-scheduled {
      /* org-scheduled */
      color: #006400;
  }
  .org-org-scheduled-previously {
      /* org-scheduled-previously */
      color: #b22222;
  }
  .org-org-scheduled-today {
      /* org-scheduled-today */
      color: #006400;
  }
  .org-org-sexp-date {
      /* org-sexp-date */
      color: #a020f0;
  }
  .org-org-special-keyword {
      /* org-special-keyword */
      color: #a020f0;
  }
  .org-org-table {
      /* org-table */
      color: #0000ff;
  }
  .org-org-tag {
      /* org-tag */
      font-weight: bold;
  }
  .org-org-tag-group {
      /* org-tag-group */
      font-weight: bold;
  }
  .org-org-target {
      /* org-target */
      text-decoration: underline;
  }
  .org-org-time-grid {
      /* org-time-grid */
      color: #b8860b;
  }
  .org-org-todo {
      /* org-todo */
      color: #ff0000;
      font-weight: bold;
  }
  .org-org-upcoming-deadline {
      /* org-upcoming-deadline */
      color: #b22222;
  }
  .org-org-verbatim {
      /* org-verbatim */
      color: #7f7f7f;
  }
  .org-org-verse {
      /* org-verse */
      color: #7f7f7f;
  }
  .org-org-warning {
      /* org-warning */
      color: #ff0000;
      font-weight: bold;
  }
  .org-outline-1 {
      /* outline-1 */
      color: #0000ff;
  }
  .org-outline-2 {
      /* outline-2 */
      color: #a0522d;
  }
  .org-outline-3 {
      /* outline-3 */
      color: #a020f0;
  }
  .org-outline-4 {
      /* outline-4 */
      color: #b22222;
  }
  .org-outline-5 {
      /* outline-5 */
      color: #228b22;
  }
  .org-outline-6 {
      /* outline-6 */
      color: #008b8b;
  }
  .org-outline-7 {
      /* outline-7 */
      color: #483d8b;
  }
  .org-outline-8 {
      /* outline-8 */
      color: #8b2252;
  }
  .org-preprocessor {
      /* font-lock-preprocessor-face */
      color: #483d8b;
  }
  .org-regexp-grouping-backslash {
      /* font-lock-regexp-grouping-backslash */
      font-weight: bold;
  }
  .org-regexp-grouping-construct {
      /* font-lock-regexp-grouping-construct */
      font-weight: bold;
  }
  .org-region {
      /* region */
      background-color: gtk_selection_bg_color;
  }
  .org-secondary-selection {
      /* secondary-selection */
      background-color: #ffff00;
  }
  .org-shadow {
      /* shadow */
      color: #7f7f7f;
  }
  .org-show-paren-match {
      /* show-paren-match */
      background-color: #40e0d0;
  }
  .org-show-paren-mismatch {
      /* show-paren-mismatch */
      color: #ffffff;
      background-color: #a020f0;
  }
  .org-string {
      /* font-lock-string-face */
      color: #8b2252;
  }
  .org-success {
      /* success */
      color: #228b22;
      font-weight: bold;
  }
  .org-table-cell {
      /* table-cell */
      color: #e5e5e5;
      background-color: #0000ff;
  }
  .org-tooltip {
      /* tooltip */
      color: #000000;
      background-color: #ffffe0;
  }
  .org-trailing-whitespace {
      /* trailing-whitespace */
      background-color: #ff0000;
  }
  .org-type {
      /* font-lock-type-face */
      color: #228b22;
  }
  .org-underline {
      /* underline */
      text-decoration: underline;
  }
  .org-variable-name {
      /* font-lock-variable-name-face */
      color: #a0522d;
  }
  .org-variable-pitch {
  }
  .org-vertical-border {
  }
  .org-warning {
      /* warning */
      color: #ff8c00;
      font-weight: bold;
  }
  .org-warning-1 {
      /* font-lock-warning-face */
      color: #ff0000;
      font-weight: bold;
  }
#+END_SRC
# htmlize.css ends here

******** orgstyle.css (*goto-PARENT-outline-and-tangle*)
#+BEGIN_SRC css
  /*
  orgstyle.css: derived from org.css @ https://github.com/gongzhitaao/orgcss.git
  A tutorial documentation for org.css ("CSS for Org-exported HTML") is available at
  https://gongzhitaao.org/orgcss/

  org.css: MIT License

  Copyright (c) 2016 gongzhitaao

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  ,*/
#+END_SRC
#+BEGIN_SRC css :tangle no
  $sans: Helvetica, sans-serif;
  $serif: Georgia, serif;
  $monospace: Lucida Console, monospace;
  $code-size: 80%;
  $smaller: 90%;
  $max-width: 710px;

  body {
      width: 95%;
      margin: 2% auto;
      font-size: 14px;
      line-height: 1.4em;
      font-family: $serif;
      color: #333;
  }

  @media screen and (min-width: 600px) {
      body {
          font-size: 18px;
      }
  }

  @media screen and (min-width: 910px) {
      body {
          width: 900px;
      }
  }

  ::selection {
      background: #D6EDFF;
  }

  p {
      margin: 0 auto;
  }

  ol,ul {
      margin: 0 auto;
  }

  dl {
      margin: 0 auto;
  }

  .title {
      text-align: center;
      margin: 0.8em auto;
      color: black;
  }

  .subtitle {
      text-align: center;
      font-size: 1.1em;
      line-height: 1.4;
      font-weight: bold;
      margin: 1em auto;
  }

  .takeaway {
      margin: auto;
      width: 80%;
      font-style: italic;
  }

  .takeaway p:last-of-type:before {
      content: "    ";
      white-space: pre;
  }

  .status {
      font-size: $smaller;
      margin: 2em auto;
  }

  [class^="section-number-"] {
      margin-right: .5em;
  }

  [id^="orgheadline"] {
      clear: both;
  }

  #footnotes {
      font-size: $smaller;
  }

  .footpara {
      display: inline;
      margin: .2em auto;
  }

  .footdef {
      margin-bottom: 1em;
  }

  .footdef sup {
      padding-right: .5em;
  }

  a {
      color: #527d9a;
      text-decoration: none;
  }

  a:hover {
      color: #003355;
      border-bottom: 1px dotted;
  }

  figure {
      padding: 0px;
      margin: 1em auto;
      text-align: center;
  }

  img {
      max-width: 100%;
      vertical-align: middle;
  }

  .MathJax_Display {
      font-size: $smaller;
      margin: 0!important;
      width: $smaller!important;
  }

  h1,h2,h3,h4,h5,h6 {
      color: #A5573E;
      line-height: 1em;
      font-family: $sans;
  }

  h1,h2,h3 {
      line-height: 1.4em;
  }

  h4,h5,h6 {
      font-size: 1em;
  }

  @media screen and (min-width: 600px) {
      h1 {
          font-size: 2em;
      }
      h2 {
          font-size: 1.5em;
      }
      h3 {
          font-size: 1.3em;
      }
      h1,h2,h3 {
          line-height: 1.4em;
      }
      h4,h5,h6 {
          font-size: 1.1em;
      }
  }

  dt {
      font-weight: bold;
  }

  /* table */

  table {
      margin: 1em auto;
      border-top: 2px solid;
      border-bottom: 2px solid;
      border-collapse: collapse;
  }

  thead {
      border-bottom: 2px solid;
  }

  table td + td, table th + th {
      border-left: 1px solid gray;
  }

  table tr {
      border-top: 1px solid lightgray;
  }

  td,th {
      padding: 0.3em 0.6em;
      vertical-align: middle;
  }

  caption.t-above {
      caption-side: top;
  }

  caption.t-bottom {
      caption-side: bottom;
  }

  caption {
      margin-bottom: 0.3em;
  }

  figcaption {
      margin-top: 0.3em;
  }

  th.org-right {
      text-align: center;
  }

  th.org-left {
      text-align: center;
  }

  th.org-center {
      text-align: center;
  }

  td.org-right {
      text-align: right;
  }

  td.org-left {
      text-align: left;
  }

  td.org-center {
      text-align: center;
  }

  blockquote {
      margin: 1em 2em;
      padding-left: 1em;
      border-left: 3px solid #ccc;
  }

  kbd {
      background-color: #f7f7f7;
      font-size: $code-size;
      margin: 0 .1em;
      padding: .1em .6em;
  }

  .todo {
      background-color: red;
      color: white;
      padding: .1em 0.3em;
      border-radius: 3px;
      background-clip: padding-box;
      font-size: $code-size;
      font-family: $monospace;
      line-height: 1;
  }

  .done {
      background-color: green;
      color: white;
      padding: .1em 0.3em;
      border-radius: 3px;
      background-clip: padding-box;
      font-size: $code-size;
      font-family: $monospace;
      line-height: 1;
  }

  .priority {
      color: orange;
      font-family: $monospace;
  }

  /* Because tag span is set to float.  This is more like a hacking.  Maybe we
     need a cleaner solution. */
  #table-of-contents li {
      clear: both;
  }

  .tag {
      font-family: $monospace;
      font-size: 0.7em;
      font-weight: normal;
  }

  .tag span {
      padding: 0.3em 0.3em;
      float: right;
      margin-right: .5em;
      border: 1px solid #bbb;
      border-radius: 3px;
      background-clip: padding-box;
      color: #333;
      background-color: #eee;
      line-height: 1;
  }

  .timestamp {
      color: #bebebe;
      font-size: $smaller;
  }

  .timestamp-kwd {
      color: #5f9ea0;
  }

  .org-right {
      margin-left: auto;
      margin-right: 0px;
      text-align: right;
  }

  .org-left {
      margin-left: 0px;
      margin-right: auto;
      text-align: left;
  }

  .org-center {
      margin-left: auto;
      margin-right: auto;
      text-align: center;
  }

  .underline {
      text-decoration: underline;
  }

  #postamble p, #preamble p {
      font-size: $smaller;
      margin: .2em;
  }

  p.verse {
      margin-left: 3%;
  }

  :not(pre) > code {
      padding: 2px 5px;
      margin: auto 1px;
      border: 1px solid #DDD;
      border-radius: 3px;
      background-clip: padding-box;
      color: #333;
      font-size: $code-size;
  }

  .org-src-container {
      border: 1px solid #ccc;
      box-shadow: 3px 3px 3px #eee;
      font-family: $monospace;
      font-size: $code-size;
      margin: 1em auto;
      padding: 0.1em 0.5em;
      position: relative;
  }

  .org-src-container>pre {
      overflow: auto;
  }

  .org-src-container>pre:before {
      display: block;
      position: absolute;
      background-color: #b3b3b3;
      top: 0;
      right: 0;
      padding: 0 0.5em;
      border-bottom-left-radius: 8px;
      border: 0;
      color: white;
      font-size: $code-size;
  }

  /* from http://demo.thi.ng/org-spec/ */

  .org-src-container>pre.src-sh:before {
      content: 'sh';
  }
  .org-src-container>pre.src-bash:before {
      content: 'bash';
  }
  .org-src-container>pre.src-emacs-lisp:before {
      content: 'Emacs Lisp';
  }
  .org-src-container>pre.src-R:before {
      content: 'R';
  }
  .org-src-container>pre.src-org:before {
      content: 'Org';
  }
  .org-src-container>pre.src-cpp:before {
      content: 'C++';
  }
  .org-src-container>pre.src-c:before {
      content: 'C';
  }
  .org-src-container>pre.src-html:before {
      content: 'HTML'
  }
  .org-src-container>pre.src-js:before {
      content: 'Javascript'
  }
  .org-src-container>pre.src-javascript:before {
      content: 'Javascript'
  }

  // More languages from http://orgmode.org/worg/org-contrib/babel/languages.html

  .org-src-container>pre.src-abc:before {
      content: 'ABC';
  }
  .org-src-container>pre.src-asymptote:before {
      content: 'Asymptote';
  }
  .org-src-container>pre.src-awk:before {
      content: 'Awk';
  }
  .org-src-container>pre.src-C:before {
      content: 'C';
  }
  .org-src-container>pre.src-calc:before {
      content: 'Calc';
  }
  .org-src-container>pre.src-clojure:before {
      content: 'Clojure';
  }
  .org-src-container>pre.src-comint:before {
      content: 'comint';
  }
  .org-src-container>pre.src-css:before {
      content: 'CSS';
  }
  .org-src-container>pre.src-D:before {
      content: 'D';
  }
  .org-src-container>pre.src-ditaa:before {
      content: 'Ditaa';
  }
  .org-src-container>pre.src-dot:before {
      content: 'Dot';
  }
  .org-src-container>pre.src-ebnf:before {
      content: 'ebnf';
  }
  .org-src-container>pre.src-forth:before {
      content: 'Forth';
  }
  .org-src-container>pre.src-F90:before {
      content: 'Fortran';
  }
  .org-src-container>pre.src-gnuplot:before {
      content: 'Gnuplot';
  }
  .org-src-container>pre.src-haskell:before {
      content: 'Haskell';
  }
  .org-src-container>pre.src-io:before {
      content: 'Io';
  }
  .org-src-container>pre.src-java:before {
      content: 'Java';
  }
  .org-src-container>pre.src-latex:before {
      content: 'LaTeX';
  }
  .org-src-container>pre.src-ledger:before {
      content: 'Ledger';
  }
  .org-src-container>pre.src-ly:before {
      content: 'Lilypond';
  }
  .org-src-container>pre.src-lisp:before {
      content: 'Lisp';
  }
  .org-src-container>pre.src-makefile:before {
      content: 'Make';
  }
  .org-src-container>pre.src-matlab:before {
      content: 'Matlab';
  }
  .org-src-container>pre.src-max:before {
      content: 'Maxima';
  }
  .org-src-container>pre.src-mscgen:before {
      content: 'Mscgen';
  }
  .org-src-container>pre.src-Caml:before {
      content: 'Objective';
  }
  .org-src-container>pre.src-octave:before {
      content: 'Octave';
  }
  .org-src-container>pre.src-org:before {
      content: 'Org';
  }
  .org-src-container>pre.src-perl:before {
      content: 'Perl';
  }
  .org-src-container>pre.src-picolisp:before {
      content: 'Picolisp';
  }
  .org-src-container>pre.src-plantuml:before {
      content: 'PlantUML';
  }
  .org-src-container>pre.src-python:before {
      content: 'Python';
  }
  .org-src-container>pre.src-ruby:before {
      content: 'Ruby';
  }
  .org-src-container>pre.src-sass:before {
      content: 'Sass';
  }
  .org-src-container>pre.src-scala:before {
      content: 'Scala';
  }
  .org-src-container>pre.src-scheme:before {
      content: 'Scheme';
  }
  .org-src-container>pre.src-screen:before {
      content: 'Screen';
  }
  .org-src-container>pre.src-sed:before {
      content: 'Sed';
  }
  .org-src-container>pre.src-shell:before {
      content: 'shell';
  }
  .org-src-container>pre.src-shen:before {
      content: 'Shen';
  }
  .org-src-container>pre.src-sql:before {
      content: 'SQL';
  }
  .org-src-container>pre.src-sqlite:before {
      content: 'SQLite';
  }
  .org-src-container>pre.src-stan:before {
      content: 'Stan';
  }
  .org-src-container>pre.src-vala:before {
      content: 'Vala';
  }
  .org-src-container>pre.src-axiom:before {
      content: 'Axiom';
  }
  .org-src-container>pre.src-browser:before {
      content: 'HTML';
  }
  .org-src-container>pre.src-cypher:before {
      content: 'Neo4j';
  }
  .org-src-container>pre.src-elixir:before {
      content: 'Elixir';
  }
  .org-src-container>pre.src-request:before {
      content: 'http';
  }
  .org-src-container>pre.src-ipython:before {
      content: 'iPython';
  }
  .org-src-container>pre.src-kotlin:before {
      content: 'Kotlin';
  }
  .org-src-container>pre.src-Flavored Erlang  lfe:before {
      content: 'Lisp';
  }
  .org-src-container>pre.src-mongo:before {
      content: 'MongoDB';
  }
  .org-src-container>pre.src-prolog:before {
      content: 'Prolog';
  }
  .org-src-container>pre.src-rec:before {
      content: 'rec';
  }
  .org-src-container>pre.src-ML  sml:before {
      content: 'Standard';
  }
  .org-src-container>pre.src-Translate  translate:before {
      content: 'Google';
  }
  .org-src-container>pre.src-typescript:before {
      content: 'Typescript';
  }
  .org-src-container>pre.src-rust:before {
      content: 'Rust';
  }

  .inlinetask {
      background: #ffffcc;
      border: 2px solid gray;
      margin: 10px;
      padding: 10px;
  }

  #org-div-home-and-up {
      font-size: 70%;
      text-align: right;
      white-space: nowrap;
  }

  .linenr {
      font-size: $smaller;
  }

  .code-highlighted {
      background-color: #ffff00;
  }

  #bibliography {
      font-size: $smaller;
  }

  #bibliography table {
      width: 100%;
  }

  .creator {
      display: block;
  }

  @media screen and (min-width: 600px) {
      .creator {
          display: inline;
          float: right;
      }
  }
#+END_SRC
#+BEGIN_SRC css
  body {
      width:95%;
      margin:2% auto;
      font-size:14px;
      line-height:1.4em;
      font-family:Georgia,serif;
      color:#333
  }

  @media screen and (min-width:600px) {
      body {
          font-size:18px
      }
  }

  @media screen and (min-width:910px) {
      body {
          width:900px
      }
  }

  ::-moz-selection {
      background:#d6edff
  }

  ::selection {
      background:#d6edff
  }

  dl,ol,p,ul {
      margin:0 auto
  }

  .title {
      margin:.8em auto;
      color:#000
  }

  .subtitle,.title {
      text-align:center
  }

  .subtitle {
      font-size:1.1em;
      line-height:1.4;
      font-weight:700;
      margin:1em auto
  }


  /* -- */
  .mainsail {
      margin:.8em auto;
      color:#A53539/*#000*/
  }

  .headsail,.mainsail {
      text-align:center
  }

  .headsail {
      font-size:1.1em;
      line-height:1.4;
      font-weight:700;
      margin:1em auto;
      color:#B9543C
  }


  .compass a {
      background: none;
  }

  .compass {
      font-family: $monospace;
      font-weight: 700;
      text-transform: uppercase;
      padding: 0;
      margin: 0;
      hyphens: none;
  }

  .compass {
      margin-top: 1em;
      font-size: 1rem;
  }

  .compass > a {
      margin: 0 1ex;
      color:#FF8C00;
  }
  /* -- */


  .takeaway {
      margin:auto;
      width:80%;
      font-style:italic
  }

  .takeaway p:last-of-type:before {
      content:"    ";
      white-space:pre
  }

  .status {
      font-size:90%;
      margin:2em auto
  }

  [class^=section-number-] {
      margin-right:.5em
  }

  [id^=orgheadline] {
      clear:both
  }

  #footnotes {
      font-size:90%
  }

  .footpara {
      display:inline;
      margin:.2em auto
  }

  .footdef {
      margin-bottom:1em
  }

  .footdef sup {
      padding-right:.5em
  }

  a {
      color:#527d9a;
      text-decoration:none
  }

  a:hover {
      color:#035;
      border-bottom:1px dotted
  }

  figure {
      padding:0;
      margin:1em auto;
      text-align:center
  }

  img {
      max-width:100%;
      vertical-align:middle
  }

  .MathJax_Display {
      font-size:90%;
      margin:0!important;
      width:90%!important
  }

  h1,h2,h3,h4,h5,h6 {
      color:#a5573e;
      line-height:1em;
      font-family:Helvetica,sans-serif
  }

  h1,h2,h3 {
      line-height:1.4em
  }

  h4,h5,h6 {
      font-size:1em
  }

  @media screen and (min-width:600px) {
      h1 {
          font-size:2em
      }
      h2 {
          font-size:1.5em
      }
      h3 {
          font-size:1.3em
      }
      h1,h2,h3 {
          line-height:1.4em
      }
      h4,h5,h6 {
          font-size:1.1em
      }
  }

  dt {
      font-weight:700
  }

  table {
      margin:1em auto;
      border-top:2px solid;
      border-collapse:collapse
  }

  table,thead {
      border-bottom:2px solid
  }

  table td+td,table th+th {
      border-left:1px solid gray
  }

  table tr {
      border-top:1px solid #d3d3d3
  }

  td,th {
      padding:.3em .6em;
      vertical-align:middle
  }

  caption.t-above {
      caption-side:top
  }

  caption.t-bottom {
      caption-side:bottom
  }

  caption {
      margin-bottom:.3em
  }

  figcaption {
      margin-top:.3em
  }

  th.org-center,th.org-left,th.org-right {
      text-align:center
  }

  td.org-right {
      text-align:right
  }

  td.org-left {
      text-align:left
  }

  td.org-center {
      text-align:center
  }

  blockquote {
      margin:1em 2em;
      padding-left:1em;
      border-left:3px solid #ccc
  }

  kbd {
      background-color:#f7f7f7;
      font-size:80%;
      margin:0 .1em;
      padding:.1em .6em
      }

  .todo {
      background-color:red
  }

  .done,.todo {
      color:#fff;
      padding:.1em .3em;
      border-radius:3px;
      background-clip:padding-box;
      font-size:80%;
      font-family:Lucida Console,monospace;
      line-height:1
  }

  .done {
      background-color:green
  }

  .priority {
      color:orange;
      font-family:Lucida Console,monospace
  }

  #table-of-contents li {
      clear:both
  }

  .tag {
      font-family:Lucida Console,monospace;
      font-size:.7em;
      font-weight:400
  }

  .tag span {
      padding:.3em;
      float:right;
      margin-right:.5em;
      border:1px solid #bbb;
      border-radius:3px;
      background-clip:padding-box;
      color:#333;
      background-color:#eee;
      line-height:1
  }

  .timestamp {
      color:#bebebe;
      font-size:90%
  }

  .timestamp-kwd {
      color:#5f9ea0
  }

  .org-right {
      margin-left:auto;
      margin-right:0;
      text-align:right
  }

  .org-left {
      margin-left:0;
      margin-right:auto;
      text-align:left
  }

  .org-center {
      margin-left:auto;
      margin-right:auto;
      text-align:center
  }

  .underline {
      text-decoration:underline
  }

  #postamble p,#preamble p {
      font-size:90%;
      margin:.2em
  }

  p.verse {
      margin-left:3%
  }

  :not(pre)>code {
      padding:2px 5px;
      margin:auto 1px;
      border:1px solid #ddd;
      border-radius:3px;
      background-clip:padding-box;
      color:#333;
      font-size:80%
  }

  .org-src-container {
      border:1px solid #ccc;
      box-shadow:3px 3px 3px #eee;
      font-family:Lucida Console,monospace;
      font-size:80%;
      margin:1em auto;
      padding:.1em .5em;
      position:relative
  }

  .org-src-container>pre {
      overflow:auto
  }

  .org-src-container>pre:before {
      display:block;
      position:absolute;
      background-color:#b3b3b3;
      top:0;
      right:0;
      padding:0 .5em;
      border-bottom-left-radius:8px;
      border:0;
      color:#fff;
      font-size:80%
  }

  .org-src-container>pre.src-sh:before {
      content:"sh"
  }

  .org-src-container>pre.src-bash:before {
      content:"bash"
  }

  .org-src-container>pre.src-emacs-lisp:before {
      content:"Emacs Lisp"
  }

  .org-src-container>pre.src-R:before {
      content:"R"
  }

  .org-src-container>pre.src-cpp:before {
      content:"C++"
  }

  .org-src-container>pre.src-c:before {
      content:"C"
  }

  .org-src-container>pre.src-html:before {
      content:"HTML"
  }

  .org-src-container>pre.src-javascript:before,.org-src-container>pre.src-js:before {
      content:"Javascript"
  }

  // more languages 0% http://orgmode.org/worg/org-contrib/babel/languages.html .org-src-container>pre.src-abc:before {
      content:"ABC"
  }

  .org-src-container>pre.src-asymptote:before {
      content:"Asymptote"
  }

  .org-src-container>pre.src-awk:before {
      content:"Awk"
  }

  .org-src-container>pre.src-C:before {
      content:"C"
  }

  .org-src-container>pre.src-calc:before {
      content:"Calc"
  }

  .org-src-container>pre.src-clojure:before {
      content:"Clojure"
  }

  .org-src-container>pre.src-comint:before {
      content:"comint"
  }

  .org-src-container>pre.src-css:before {
      content:"CSS"
  }

  .org-src-container>pre.src-D:before {
      content:"D"
  }

  .org-src-container>pre.src-ditaa:before {
      content:"Ditaa"
  }

  .org-src-container>pre.src-dot:before {
      content:"Dot"
  }

  .org-src-container>pre.src-ebnf:before {
      content:"ebnf"
  }

  .org-src-container>pre.src-forth:before {
      content:"Forth"
  }

  .org-src-container>pre.src-F90:before {
      content:"Fortran"
  }

  .org-src-container>pre.src-gnuplot:before {
      content:"Gnuplot"
  }

  .org-src-container>pre.src-haskell:before {
      content:"Haskell"
  }

  .org-src-container>pre.src-io:before {
      content:"Io"
  }

  .org-src-container>pre.src-java:before {
      content:"Java"
  }

  .org-src-container>pre.src-latex:before {
      content:"LaTeX"
  }

  .org-src-container>pre.src-ledger:before {
      content:"Ledger"
  }

  .org-src-container>pre.src-ly:before {
      content:"Lilypond"
  }

  .org-src-container>pre.src-lisp:before {
      content:"Lisp"
  }

  .org-src-container>pre.src-makefile:before {
      content:"Make"
  }

  .org-src-container>pre.src-matlab:before {
      content:"Matlab"
  }

  .org-src-container>pre.src-max:before {
      content:"Maxima"
  }

  .org-src-container>pre.src-mscgen:before {
      content:"Mscgen"
  }

  .org-src-container>pre.src-Caml:before {
      content:"Objective"
  }

  .org-src-container>pre.src-octave:before {
      content:"Octave"
  }

  .org-src-container>pre.src-org:before {
      content:"Org"
  }

  .org-src-container>pre.src-perl:before {
      content:"Perl"
  }

  .org-src-container>pre.src-picolisp:before {
      content:"Picolisp"
  }

  .org-src-container>pre.src-plantuml:before {
      content:"PlantUML"
  }

  .org-src-container>pre.src-python:before {
      content:"Python"
  }

  .org-src-container>pre.src-ruby:before {
      content:"Ruby"
  }

  .org-src-container>pre.src-sass:before {
      content:"Sass"
  }

  .org-src-container>pre.src-scala:before {
      content:"Scala"
  }

  .org-src-container>pre.src-scheme:before {
      content:"Scheme"
  }

  .org-src-container>pre.src-screen:before {
      content:"Screen"
  }

  .org-src-container>pre.src-sed:before {
      content:"Sed"
  }

  .org-src-container>pre.src-shell:before {
      content:"shell"
  }

  .org-src-container>pre.src-shen:before {
      content:"Shen"
  }

  .org-src-container>pre.src-sql:before {
      content:"SQL"
  }

  .org-src-container>pre.src-sqlite:before {
      content:"SQLite"
  }

  .org-src-container>pre.src-stan:before {
      content:"Stan"
  }

  .org-src-container>pre.src-vala:before {
      content:"Vala"
  }

  .org-src-container>pre.src-axiom:before {
      content:"Axiom"
  }

  .org-src-container>pre.src-browser:before {
      content:"HTML"
  }

  .org-src-container>pre.src-cypher:before {
      content:"Neo4j"
  }

  .org-src-container>pre.src-elixir:before {
      content:"Elixir"
  }

  .org-src-container>pre.src-request:before {
      content:"http"
  }

  .org-src-container>pre.src-ipython:before {
      content:"iPython"
  }

  .org-src-container>pre.src-kotlin:before {
      content:"Kotlin"
  }

  .org-src-container>pre.src-Flavored erlang lfe:before {
      content:"Lisp"
  }

  .org-src-container>pre.src-mongo:before {
      content:"MongoDB"
  }

  .org-src-container>pre.src-prolog:before {
      content:"Prolog"
  }

  .org-src-container>pre.src-rec:before {
      content:"rec"
  }

  .org-src-container>pre.src-ML sml:before {
      content:"Standard"
  }

  .org-src-container>pre.src-Translate translate:before {
      content:"Google"
  }

  .org-src-container>pre.src-typescript:before {
      content:"Typescript"
  }

  .org-src-container>pre.src-rust:before {
      content:"Rust"
  }


  .inlinetask {
      background:#ffc;
      border:2px solid gray;
      margin:10px;
      padding:10px
  }

  #org-div-home-and-up {
      font-size:70%;
      text-align:right;
      white-space:nowrap
  }

  .linenr {
      font-size:90%
  }

  .code-highlighted {
      background-color:#ff0
  }

  #bibliography {
      font-size:90%
  }

  #bibliography table {
      width:100%
  }

  .creator {
      display:block
  }

  @media screen and (min-width:600px) {
      .creator {
          display:inline;
          float:right
      }
  }
#+END_SRC

# orgstyle.css ends here
******* normalize.css v8.0.0
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/normalize.css
:END:
#+BEGIN_SRC css
  /*
  normalize.css: The MIT License (MIT)

  Copyright © Nicolas Gallagher and Jonathan Neal

  Permission is hereby granted, free of charge, to any person obtaining a copy of
  this software and associated documentation files (the "Software"), to deal in
  the Software without restriction, including without limitation the rights to
  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  of the Software, and to permit persons to whom the Software is furnished to do
  so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  ,*/
#+END_SRC
#+BEGIN_SRC css
    /*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */

    /* Document
       ========================================================================== */

    /**
     ,* 1. Correct the line height in all browsers.
     ,* 2. Prevent adjustments of font size after orientation changes in iOS.
     ,*/

    html {
      line-height: 1.15; /* 1 */
      -webkit-text-size-adjust: 100%; /* 2 */
    }

    /* Sections
       ========================================================================== */

    /**
     ,* Remove the margin in all browsers.
     ,*/

    body {
      margin: 0;
    }

    /**
     ,* Correct the font size and margin on `h1` elements within `section` and
     ,* `article` contexts in Chrome, Firefox, and Safari.
     ,*/

    h1 {
      font-size: 2em;
      margin: 0.67em 0;
    }

    /* Grouping content
       ========================================================================== */

    /**
     ,* 1. Add the correct box sizing in Firefox.
     ,* 2. Show the overflow in Edge and IE.
     ,*/

    hr {
      box-sizing: content-box; /* 1 */
      height: 0; /* 1 */
      overflow: visible; /* 2 */
    }

    /**
     ,* 1. Correct the inheritance and scaling of font size in all browsers.
     ,* 2. Correct the odd `em` font sizing in all browsers.
     ,*/

    pre {
      font-family: monospace, monospace; /* 1 */
      font-size: 1em; /* 2 */
    }

    /* Text-level semantics
       ========================================================================== */

    /**
     ,* Remove the gray background on active links in IE 10.
     ,*/

    a {
      background-color: transparent;
    }

    /**
     ,* 1. Remove the bottom border in Chrome 57-
     ,* 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     ,*/

    abbr[title] {
      border-bottom: none; /* 1 */
      text-decoration: underline; /* 2 */
      text-decoration: underline dotted; /* 2 */
    }

    /**
     ,* Add the correct font weight in Chrome, Edge, and Safari.
     ,*/

    b,
    strong {
      font-weight: bolder;
    }

    /**
     ,* 1. Correct the inheritance and scaling of font size in all browsers.
     ,* 2. Correct the odd `em` font sizing in all browsers.
     ,*/

    code,
    kbd,
    samp {
      font-family: monospace, monospace; /* 1 */
      font-size: 1em; /* 2 */
    }

    /**
     ,* Add the correct font size in all browsers.
     ,*/

    small {
      font-size: 80%;
    }

    /**
     ,* Prevent `sub` and `sup` elements from affecting the line height in
     ,* all browsers.
     ,*/

    sub,
    sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline;
    }

    sub {
      bottom: -0.25em;
    }

    sup {
      top: -0.5em;
    }

    /* Embedded content
       ========================================================================== */

    /**
     ,* Remove the border on images inside links in IE 10.
     ,*/

    img {
      border-style: none;
    }

    /* Forms
       ========================================================================== */

    /**
     ,* 1. Change the font styles in all browsers.
     ,* 2. Remove the margin in Firefox and Safari.
     ,*/

    button,
    input,
    optgroup,
    select,
    textarea {
      font-family: inherit; /* 1 */
      font-size: 100%; /* 1 */
      line-height: 1.15; /* 1 */
      margin: 0; /* 2 */
    }

    /**
     ,* Show the overflow in IE.
     ,* 1. Show the overflow in Edge.
     ,*/

    button,
    input { /* 1 */
      overflow: visible;
    }

    /**
     ,* Remove the inheritance of text transform in Edge, Firefox, and IE.
     ,* 1. Remove the inheritance of text transform in Firefox.
     ,*/

    button,
    select { /* 1 */
      text-transform: none;
    }

    /**
     ,* Correct the inability to style clickable types in iOS and Safari.
     ,*/

    button,
    [type="button"],
    [type="reset"],
    [type="submit"] {
      -webkit-appearance: button;
    }

    /**
     ,* Remove the inner border and padding in Firefox.
     ,*/

    button::-moz-focus-inner,
    [type="button"]::-moz-focus-inner,
    [type="reset"]::-moz-focus-inner,
    [type="submit"]::-moz-focus-inner {
      border-style: none;
      padding: 0;
    }

    /**
     ,* Restore the focus styles unset by the previous rule.
     ,*/

    button:-moz-focusring,
    [type="button"]:-moz-focusring,
    [type="reset"]:-moz-focusring,
    [type="submit"]:-moz-focusring {
      outline: 1px dotted ButtonText;
    }

    /**
     ,* Correct the padding in Firefox.
     ,*/

    fieldset {
      padding: 0.35em 0.75em 0.625em;
    }

    /**
     ,* 1. Correct the text wrapping in Edge and IE.
     ,* 2. Correct the color inheritance from `fieldset` elements in IE.
     ,* 3. Remove the padding so developers are not caught out when they zero out
     ,*    `fieldset` elements in all browsers.
     ,*/

    legend {
      box-sizing: border-box; /* 1 */
      color: inherit; /* 2 */
      display: table; /* 1 */
      max-width: 100%; /* 1 */
      padding: 0; /* 3 */
      white-space: normal; /* 1 */
    }

    /**
     ,* Add the correct vertical alignment in Chrome, Firefox, and Opera.
     ,*/

    progress {
      vertical-align: baseline;
    }

    /**
     ,* Remove the default vertical scrollbar in IE 10+.
     ,*/

    textarea {
      overflow: auto;
    }

    /**
     ,* 1. Add the correct box sizing in IE 10.
     ,* 2. Remove the padding in IE 10.
     ,*/

    [type="checkbox"],
    [type="radio"] {
      box-sizing: border-box; /* 1 */
      padding: 0; /* 2 */
    }

    /**
     ,* Correct the cursor style of increment and decrement buttons in Chrome.
     ,*/

    [type="number"]::-webkit-inner-spin-button,
    [type="number"]::-webkit-outer-spin-button {
      height: auto;
    }

    /**
     ,* 1. Correct the odd appearance in Chrome and Safari.
     ,* 2. Correct the outline style in Safari.
     ,*/

    [type="search"] {
      -webkit-appearance: textfield; /* 1 */
      outline-offset: -2px; /* 2 */
    }

    /**
     ,* Remove the inner padding in Chrome and Safari on macOS.
     ,*/

    [type="search"]::-webkit-search-decoration {
      -webkit-appearance: none;
    }

    /**
     ,* 1. Correct the inability to style clickable types in iOS and Safari.
     ,* 2. Change font properties to `inherit` in Safari.
     ,*/

    ::-webkit-file-upload-button {
      -webkit-appearance: button; /* 1 */
      font: inherit; /* 2 */
    }

    /* Interactive
       ========================================================================== */

    /*
     ,* Add the correct display in Edge, IE 10+, and Firefox.
     ,*/

    details {
      display: block;
    }

    /*
     ,* Add the correct display in all browsers.
     ,*/

    summary {
      display: list-item;
    }

    /* Misc
       ========================================================================== */

    /**
     ,* Add the correct display in IE 10+.
     ,*/

    template {
      display: none;
    }

    /**
     ,* Add the correct display in IE 10.
     ,*/

    [hidden] {
      display: none;
    }
#+END_SRC
# normalize.css v8.0.0 ends here
******* normalize.css v4.1.1
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/normalize.css
:END:
#+BEGIN_SRC css :tangle no
  /*
  normalize.css: The MIT License (MIT)

  Copyright © Nicolas Gallagher and Jonathan Neal

  Permission is hereby granted, free of charge, to any person obtaining a copy of
  this software and associated documentation files (the "Software"), to deal in
  the Software without restriction, including without limitation the rights to
  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  of the Software, and to permit persons to whom the Software is furnished to do
  so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  ,*/
#+END_SRC
#+BEGIN_SRC css :tangle no
/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */

/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Correct the line height in all browsers.
 * 3. Prevent adjustments of font size after orientation changes in IE and iOS.
 */

html {
  font-family: sans-serif; /* 1 */
  line-height: 1.15; /* 2 */
  -ms-text-size-adjust: 100%; /* 3 */
  -webkit-text-size-adjust: 100%; /* 3 */
}

/**
 * Remove the margin in all browsers (opinionated).
 */

body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */

article,
aside,
details, /* 1 */
figcaption,
figure,
footer,
header,
main, /* 2 */
menu,
nav,
section,
summary { /* 1 */
  display: block;
}

/**
 * Add the correct display in IE 9-.
 */

audio,
canvas,
progress,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
  vertical-align: baseline;
}

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */

template, /* 1 */
[hidden] {
  display: none;
}

/* Links
   ========================================================================== */

/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */

a {
  background-color: transparent; /* 1 */
  -webkit-text-decoration-skip: objects; /* 2 */
}

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */

a:active,
a:hover {
  outline-width: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */

b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
  font-weight: bolder;
}

/**
 * Add the correct font style in Android 4.3-.
 */

dfn {
  font-style: italic;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Add the correct background and color in IE 9-.
 */

mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove the border on images inside links in IE 10-.
 */

img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
pre,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct margin in IE 8.
 */

figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/* Forms
   ========================================================================== */

/**
 * 1. Change font properties to `inherit` in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
  font: inherit; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Restore the font weight unset by the previous rule.
 */

optgroup {
  font-weight: bold;
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input { /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select { /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */

button,
html [type="button"], /* 1 */
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */

textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */

::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}
#+END_SRC
# normalize.css v4.1.1 ends here

******* htmlize.css
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/htmlize.css
:END:
#+BEGIN_SRC css
  /* Generated from (org-html-htmlize-generate-css) with minimum
     packages loaded and default light theme */

  .org-bold {
      /* bold */
      font-weight: bold;
  }
  .org-bold-italic {
      /* bold-italic */
      font-weight: bold;
      font-style: italic;
  }
  .org-border {
  }
  .org-buffer-menu-buffer {
      /* buffer-menu-buffer */
      font-weight: bold;
  }
  .org-builtin {
      /* font-lock-builtin-face */
      color: #483d8b;
  }
  .org-button {
      /* button */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-calendar-month-header {
      /* calendar-month-header */
      color: #0000ff;
  }
  .org-calendar-today {
      /* calendar-today */
      text-decoration: underline;
  }
  .org-calendar-weekday-header {
      /* calendar-weekday-header */
      color: #008b8b;
  }
  .org-calendar-weekend-header {
      /* calendar-weekend-header */
      color: #b22222;
  }
  .org-comint-highlight-input {
      /* comint-highlight-input */
      font-weight: bold;
  }
  .org-comint-highlight-prompt {
      /* comint-highlight-prompt */
      color: #0000cd;
  }
  .org-comment {
      /* font-lock-comment-face */
      color: #b22222;
  }
  .org-comment-delimiter {
      /* font-lock-comment-delimiter-face */
      color: #b22222;
  }
  .org-constant {
      /* font-lock-constant-face */
      color: #008b8b;
  }
  .org-diary {
      /* diary */
      color: #ff0000;
  }
  .org-doc {
      /* font-lock-doc-face */
      color: #8b2252;
  }
  .org-error {
      /* error */
      color: #ff0000;
      font-weight: bold;
  }
  .org-escape-glyph {
      /* escape-glyph */
      color: #a52a2a;
  }
  .org-file-name-shadow {
      /* file-name-shadow */
      color: #7f7f7f;
  }
  .org-fixed-pitch {
  }
  .org-fringe {
      /* fringe */
      background-color: #f2f2f2;
  }
  .org-function-name {
      /* font-lock-function-name-face */
      color: #0000ff;
  }
  .org-glyphless-char {
      /* glyphless-char */
      font-size: 60%;
  }
  .org-header-line {
      /* header-line */
      color: #333333;
      background-color: #e5e5e5;
  }
  .org-help-argument-name {
      /* help-argument-name */
      font-style: italic;
  }
  .org-highlight {
      /* highlight */
      background-color: #b4eeb4;
  }
  .org-holiday {
      /* holiday */
      background-color: #ffc0cb;
  }
  .org-info-header-node {
      /* info-header-node */
      color: #a52a2a;
      font-weight: bold;
      font-style: italic;
  }
  .org-info-header-xref {
      /* info-header-xref */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-info-index-match {
      /* info-index-match */
      background-color: #ffff00;
  }
  .org-info-menu-header {
      /* info-menu-header */
      font-weight: bold;
  }
  .org-info-menu-star {
      /* info-menu-star */
      color: #ff0000;
  }
  .org-info-node {
      /* info-node */
      color: #a52a2a;
      font-weight: bold;
      font-style: italic;
  }
  .org-info-title-1 {
      /* info-title-1 */
      font-size: 172%;
      font-weight: bold;
  }
  .org-info-title-2 {
      /* info-title-2 */
      font-size: 144%;
      font-weight: bold;
  }
  .org-info-title-3 {
      /* info-title-3 */
      font-size: 120%;
      font-weight: bold;
  }
  .org-info-title-4 {
      /* info-title-4 */
      font-weight: bold;
  }
  .org-info-xref {
      /* info-xref */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-italic {
      /* italic */
      font-style: italic;
  }
  .org-keyword {
      /* font-lock-keyword-face */
      color: #a020f0;
  }
  .org-lazy-highlight {
      /* lazy-highlight */
      background-color: #afeeee;
  }
  .org-link {
      /* link */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-link-visited {
      /* link-visited */
      color: #8b008b;
      text-decoration: underline;
  }
  .org-makefile-makepp-perl {
      /* makefile-makepp-perl */
      background-color: #bfefff;
  }
  .org-makefile-shell {
  }
  .org-makefile-space {
      /* makefile-space */
      background-color: #ff69b4;
  }
  .org-makefile-targets {
      /* makefile-targets */
      color: #0000ff;
  }
  .org-match {
      /* match */
      background-color: #ffff00;
  }
  .org-negation-char {
  }
  .org-next-error {
      /* next-error */
      background-color: gtk_selection_bg_color;
  }
  .org-nobreak-space {
      /* nobreak-space */
      color: #a52a2a;
      text-decoration: underline;
  }
  .org-org-agenda-calendar-event {
      /* org-agenda-calendar-event */
      color: #000000;
      background-color: #ffffff;
  }
  .org-org-agenda-calendar-sexp {
      /* org-agenda-calendar-sexp */
      color: #000000;
      background-color: #ffffff;
  }
  .org-org-agenda-clocking {
      /* org-agenda-clocking */
      background-color: #ffff00;
  }
  .org-org-agenda-column-dateline {
      /* org-agenda-column-dateline */
      background-color: #e5e5e5;
  }
  .org-org-agenda-current-time {
      /* org-agenda-current-time */
      color: #b8860b;
  }
  .org-org-agenda-date {
      /* org-agenda-date */
      color: #0000ff;
  }
  .org-org-agenda-date-today {
      /* org-agenda-date-today */
      color: #0000ff;
      font-weight: bold;
      font-style: italic;
  }
  .org-org-agenda-date-weekend {
      /* org-agenda-date-weekend */
      color: #0000ff;
      font-weight: bold;
  }
  .org-org-agenda-diary {
      /* org-agenda-diary */
      color: #000000;
      background-color: #ffffff;
  }
  .org-org-agenda-dimmed-todo {
      /* org-agenda-dimmed-todo-face */
      color: #7f7f7f;
  }
  .org-org-agenda-done {
      /* org-agenda-done */
      color: #228b22;
  }
  .org-org-agenda-filter-category {
      /* org-agenda-filter-category */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-agenda-filter-effort {
      /* org-agenda-filter-effort */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-agenda-filter-regexp {
      /* org-agenda-filter-regexp */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-agenda-filter-tags {
      /* org-agenda-filter-tags */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-agenda-restriction-lock {
      /* org-agenda-restriction-lock */
      background-color: #eeeeee;
  }
  .org-org-agenda-structure {
      /* org-agenda-structure */
      color: #0000ff;
  }
  .org-org-archived {
      /* org-archived */
      color: #7f7f7f;
  }
  .org-org-block {
      /* org-block */
      color: #7f7f7f;
  }
  .org-org-block-begin-line {
      /* org-block-begin-line */
      color: #b22222;
  }
  .org-org-block-end-line {
      /* org-block-end-line */
      color: #b22222;
  }
  .org-org-checkbox {
      /* org-checkbox */
      font-weight: bold;
  }
  .org-org-checkbox-statistics-done {
      /* org-checkbox-statistics-done */
      color: #228b22;
      font-weight: bold;
  }
  .org-org-checkbox-statistics-todo {
      /* org-checkbox-statistics-todo */
      color: #ff0000;
      font-weight: bold;
  }
  .org-org-clock-overlay {
      /* org-clock-overlay */
      color: #000000;
      background-color: #d3d3d3;
  }
  .org-org-code {
      /* org-code */
      color: #7f7f7f;
  }
  .org-org-column {
      /* org-column */
      background-color: #e5e5e5;
  }
  .org-org-column-title {
      /* org-column-title */
      background-color: #e5e5e5;
      font-weight: bold;
      text-decoration: underline;
  }
  .org-org-date {
      /* org-date */
      color: #a020f0;
      text-decoration: underline;
  }
  .org-org-date-selected {
      /* org-date-selected */
      color: #ff0000;
  }
  .org-org-default {
      /* org-default */
      color: #000000;
      background-color: #ffffff;
  }
  .org-org-document-info {
      /* org-document-info */
      color: #191970;
  }
  .org-org-document-info-keyword {
      /* org-document-info-keyword */
      color: #7f7f7f;
  }
  .org-org-document-title {
      /* org-document-title */
      color: #191970;
      font-weight: bold;
  }
  .org-org-done {
      /* org-done */
      color: #228b22;
      font-weight: bold;
  }
  .org-org-drawer {
      /* org-drawer */
      color: #0000ff;
  }
  .org-org-ellipsis {
      /* org-ellipsis */
      color: #b8860b;
      text-decoration: underline;
  }
  .org-org-footnote {
      /* org-footnote */
      color: #a020f0;
      text-decoration: underline;
  }
  .org-org-formula {
      /* org-formula */
      color: #b22222;
  }
  .org-org-headline-done {
      /* org-headline-done */
      color: #bc8f8f;
  }
  .org-org-hide {
      /* org-hide */
      color: #ffffff;
  }
  .org-org-latex-and-related {
      /* org-latex-and-related */
      color: #8b4513;
  }
  .org-org-level-1 {
      /* org-level-1 */
      color: #0000ff;
  }
  .org-org-level-2 {
      /* org-level-2 */
      color: #a0522d;
  }
  .org-org-level-3 {
      /* org-level-3 */
      color: #a020f0;
  }
  .org-org-level-4 {
      /* org-level-4 */
      color: #b22222;
  }
  .org-org-level-5 {
      /* org-level-5 */
      color: #228b22;
  }
  .org-org-level-6 {
      /* org-level-6 */
      color: #008b8b;
  }
  .org-org-level-7 {
      /* org-level-7 */
      color: #483d8b;
  }
  .org-org-level-8 {
      /* org-level-8 */
      color: #8b2252;
    }
  .org-org-link {
      /* org-link */
      color: #3a5fcd;
      text-decoration: underline;
  }
  .org-org-list-dt {
      /* org-list-dt */
      font-weight: bold;
  }
  .org-org-macro {
      /* org-macro */
      color: #8b4513;
  }
  .org-org-meta-line {
      /* org-meta-line */
      color: #b22222;
  }
  .org-org-mode-line-clock {
      /* org-mode-line-clock */
      color: #000000;
      background-color: #bfbfbf;
  }
  .org-org-mode-line-clock-overrun {
      /* org-mode-line-clock-overrun */
      color: #000000;
      background-color: #ff0000;
  }
  .org-org-priority {
      /* org-priority */
      color: #a020f0;
  }
  .org-org-property-value {
  }
  .org-org-quote {
      /* org-quote */
      color: #7f7f7f;
  }
  .org-org-scheduled {
      /* org-scheduled */
      color: #006400;
  }
  .org-org-scheduled-previously {
      /* org-scheduled-previously */
      color: #b22222;
  }
  .org-org-scheduled-today {
      /* org-scheduled-today */
      color: #006400;
  }
  .org-org-sexp-date {
      /* org-sexp-date */
      color: #a020f0;
  }
  .org-org-special-keyword {
      /* org-special-keyword */
      color: #a020f0;
  }
  .org-org-table {
      /* org-table */
      color: #0000ff;
  }
  .org-org-tag {
      /* org-tag */
      font-weight: bold;
  }
  .org-org-tag-group {
      /* org-tag-group */
      font-weight: bold;
  }
  .org-org-target {
      /* org-target */
      text-decoration: underline;
  }
  .org-org-time-grid {
      /* org-time-grid */
      color: #b8860b;
  }
  .org-org-todo {
      /* org-todo */
      color: #ff0000;
      font-weight: bold;
  }
  .org-org-upcoming-deadline {
      /* org-upcoming-deadline */
      color: #b22222;
  }
  .org-org-verbatim {
      /* org-verbatim */
      color: #7f7f7f;
  }
  .org-org-verse {
      /* org-verse */
      color: #7f7f7f;
  }
  .org-org-warning {
      /* org-warning */
      color: #ff0000;
      font-weight: bold;
  }
  .org-outline-1 {
      /* outline-1 */
      color: #0000ff;
  }
  .org-outline-2 {
      /* outline-2 */
      color: #a0522d;
  }
  .org-outline-3 {
      /* outline-3 */
      color: #a020f0;
  }
  .org-outline-4 {
      /* outline-4 */
      color: #b22222;
  }
  .org-outline-5 {
      /* outline-5 */
      color: #228b22;
  }
  .org-outline-6 {
      /* outline-6 */
      color: #008b8b;
  }
  .org-outline-7 {
      /* outline-7 */
      color: #483d8b;
  }
  .org-outline-8 {
      /* outline-8 */
      color: #8b2252;
  }
  .org-preprocessor {
      /* font-lock-preprocessor-face */
      color: #483d8b;
  }
  .org-regexp-grouping-backslash {
      /* font-lock-regexp-grouping-backslash */
      font-weight: bold;
  }
  .org-regexp-grouping-construct {
      /* font-lock-regexp-grouping-construct */
      font-weight: bold;
  }
  .org-region {
      /* region */
      background-color: gtk_selection_bg_color;
  }
  .org-secondary-selection {
      /* secondary-selection */
      background-color: #ffff00;
  }
  .org-shadow {
      /* shadow */
      color: #7f7f7f;
  }
  .org-show-paren-match {
      /* show-paren-match */
      background-color: #40e0d0;
  }
  .org-show-paren-mismatch {
      /* show-paren-mismatch */
      color: #ffffff;
      background-color: #a020f0;
  }
  .org-string {
      /* font-lock-string-face */
      color: #8b2252;
  }
  .org-success {
      /* success */
      color: #228b22;
      font-weight: bold;
  }
  .org-table-cell {
      /* table-cell */
      color: #e5e5e5;
      background-color: #0000ff;
  }
  .org-tooltip {
      /* tooltip */
      color: #000000;
      background-color: #ffffe0;
  }
  .org-trailing-whitespace {
      /* trailing-whitespace */
      background-color: #ff0000;
  }
  .org-type {
      /* font-lock-type-face */
      color: #228b22;
  }
  .org-underline {
      /* underline */
      text-decoration: underline;
  }
  .org-variable-name {
      /* font-lock-variable-name-face */
      color: #a0522d;
  }
  .org-variable-pitch {
  }
  .org-vertical-border {
  }
  .org-warning {
      /* warning */
      color: #ff8c00;
      font-weight: bold;
  }
  .org-warning-1 {
      /* font-lock-warning-face */
      color: #ff0000;
      font-weight: bold;
  }
#+END_SRC
# htmlize.css ends here

******* orgstyle-bare.css
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/orgstyle-bare.css
:END:
#+BEGIN_SRC css
  /*
  orgstyle-bare.css: derived from org.css @ https://github.com/gongzhitaao/orgcss.git
  A tutorial documentation for org.css ("CSS for Org-exported HTML") is available at
  https://gongzhitaao.org/orgcss/

  org.css: MIT License

  Copyright (c) 2016 gongzhitaao

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  ,*/
#+END_SRC
#+BEGIN_SRC css :tangle no
  $sans: Helvetica, sans-serif;
  $serif: Georgia, serif;
  $monospace: Lucida Console, monospace;
  $code-size: 80%;
  $smaller: 90%;
  $max-width: 710px;

  body {
      width: 95%;
      margin: 2% auto;
      font-size: 14px;
      line-height: 1.4em;
      font-family: $serif;
      color: #333;
  }

  @media screen and (min-width: 600px) {
      body {
          font-size: 18px;
      }
  }

  @media screen and (min-width: 910px) {
      body {
          width: 900px;
      }
  }

  ::selection {
      background: #D6EDFF;
  }

  p {
      margin: 0 auto;
  }

  ol,ul {
      margin: 0 auto;
  }

  dl {
      margin: 0 auto;
  }

  .title {
      text-align: center;
      margin: 0.8em auto;
      color: black;
  }

  .subtitle {
      text-align: center;
      font-size: 1.1em;
      line-height: 1.4;
      font-weight: bold;
      margin: 1em auto;
  }

  .takeaway {
      margin: auto;
      width: 80%;
      font-style: italic;
  }

  .takeaway p:last-of-type:before {
      content: "    ";
      white-space: pre;
  }

  .status {
      font-size: $smaller;
      margin: 2em auto;
  }

  [class^="section-number-"] {
      margin-right: .5em;
  }

  [id^="orgheadline"] {
      clear: both;
  }

  #footnotes {
      font-size: $smaller;
  }

  .footpara {
      display: inline;
      margin: .2em auto;
  }

  .footdef {
      margin-bottom: 1em;
  }

  .footdef sup {
      padding-right: .5em;
  }

  a {
      color: #527d9a;
      text-decoration: none;
  }

  a:hover {
      color: #003355;
      border-bottom: 1px dotted;
  }

  figure {
      padding: 0px;
      margin: 1em auto;
      text-align: center;
  }

  img {
      max-width: 100%;
      vertical-align: middle;
  }

  .MathJax_Display {
      font-size: $smaller;
      margin: 0!important;
      width: $smaller!important;
  }

  h1,h2,h3,h4,h5,h6 {
      color: #A5573E;
      line-height: 1em;
      font-family: $sans;
  }

  h1,h2,h3 {
      line-height: 1.4em;
  }

  h4,h5,h6 {
      font-size: 1em;
  }

  @media screen and (min-width: 600px) {
      h1 {
          font-size: 2em;
      }
      h2 {
          font-size: 1.5em;
      }
      h3 {
          font-size: 1.3em;
      }
      h1,h2,h3 {
          line-height: 1.4em;
      }
      h4,h5,h6 {
          font-size: 1.1em;
      }
  }

  dt {
      font-weight: bold;
  }

  /* table */

  table {
      margin: 1em auto;
      border-top: 2px solid;
      border-bottom: 2px solid;
      border-collapse: collapse;
  }

  thead {
      border-bottom: 2px solid;
  }

  table td + td, table th + th {
      border-left: 1px solid gray;
  }

  table tr {
      border-top: 1px solid lightgray;
  }

  td,th {
      padding: 0.3em 0.6em;
      vertical-align: middle;
  }

  caption.t-above {
      caption-side: top;
  }

  caption.t-bottom {
      caption-side: bottom;
  }

  caption {
      margin-bottom: 0.3em;
  }

  figcaption {
      margin-top: 0.3em;
  }

  th.org-right {
      text-align: center;
  }

  th.org-left {
      text-align: center;
  }

  th.org-center {
      text-align: center;
  }

  td.org-right {
      text-align: right;
  }

  td.org-left {
      text-align: left;
  }

  td.org-center {
      text-align: center;
  }

  blockquote {
      margin: 1em 2em;
      padding-left: 1em;
      border-left: 3px solid #ccc;
  }

  kbd {
      background-color: #f7f7f7;
      font-size: $code-size;
      margin: 0 .1em;
      padding: .1em .6em;
  }

  .todo {
      background-color: red;
      color: white;
      padding: .1em 0.3em;
      border-radius: 3px;
      background-clip: padding-box;
      font-size: $code-size;
      font-family: $monospace;
      line-height: 1;
  }

  .done {
      background-color: green;
      color: white;
      padding: .1em 0.3em;
      border-radius: 3px;
      background-clip: padding-box;
      font-size: $code-size;
      font-family: $monospace;
      line-height: 1;
  }

  .priority {
      color: orange;
      font-family: $monospace;
  }

  /* Because tag span is set to float.  This is more like a hacking.  Maybe we
     need a cleaner solution. */
  #table-of-contents li {
      clear: both;
  }

  .tag {
      font-family: $monospace;
      font-size: 0.7em;
      font-weight: normal;
  }

  .tag span {
      padding: 0.3em 0.3em;
      float: right;
      margin-right: .5em;
      border: 1px solid #bbb;
      border-radius: 3px;
      background-clip: padding-box;
      color: #333;
      background-color: #eee;
      line-height: 1;
  }

  .timestamp {
      color: #bebebe;
      font-size: $smaller;
  }

  .timestamp-kwd {
      color: #5f9ea0;
  }

  .org-right {
      margin-left: auto;
      margin-right: 0px;
      text-align: right;
  }

  .org-left {
      margin-left: 0px;
      margin-right: auto;
      text-align: left;
  }

  .org-center {
      margin-left: auto;
      margin-right: auto;
      text-align: center;
  }

  .underline {
      text-decoration: underline;
  }

  #postamble p, #preamble p {
      font-size: $smaller;
      margin: .2em;
  }

  p.verse {
      margin-left: 3%;
  }

  :not(pre) > code {
      padding: 2px 5px;
      margin: auto 1px;
      border: 1px solid #DDD;
      border-radius: 3px;
      background-clip: padding-box;
      color: #333;
      font-size: $code-size;
  }

  .org-src-container {
      border: 1px solid #ccc;
      box-shadow: 3px 3px 3px #eee;
      font-family: $monospace;
      font-size: $code-size;
      margin: 1em auto;
      padding: 0.1em 0.5em;
      position: relative;
  }

  .org-src-container>pre {
      overflow: auto;
  }

  .org-src-container>pre:before {
      display: block;
      position: absolute;
      background-color: #b3b3b3;
      top: 0;
      right: 0;
      padding: 0 0.5em;
      border-bottom-left-radius: 8px;
      border: 0;
      color: white;
      font-size: $code-size;
  }

  /* from http://demo.thi.ng/org-spec/ */

  .org-src-container>pre.src-sh:before {
      content: 'sh';
  }
  .org-src-container>pre.src-bash:before {
      content: 'bash';
  }
  .org-src-container>pre.src-emacs-lisp:before {
      content: 'Emacs Lisp';
  }
  .org-src-container>pre.src-R:before {
      content: 'R';
  }
  .org-src-container>pre.src-org:before {
      content: 'Org';
  }
  .org-src-container>pre.src-cpp:before {
      content: 'C++';
  }
  .org-src-container>pre.src-c:before {
      content: 'C';
  }
  .org-src-container>pre.src-html:before {
      content: 'HTML'
  }
  .org-src-container>pre.src-js:before {
      content: 'Javascript'
  }
  .org-src-container>pre.src-javascript:before {
      content: 'Javascript'
  }

  // More languages from http://orgmode.org/worg/org-contrib/babel/languages.html

  .org-src-container>pre.src-abc:before {
      content: 'ABC';
  }
  .org-src-container>pre.src-asymptote:before {
      content: 'Asymptote';
  }
  .org-src-container>pre.src-awk:before {
      content: 'Awk';
  }
  .org-src-container>pre.src-C:before {
      content: 'C';
  }
  .org-src-container>pre.src-calc:before {
      content: 'Calc';
  }
  .org-src-container>pre.src-clojure:before {
      content: 'Clojure';
  }
  .org-src-container>pre.src-comint:before {
      content: 'comint';
  }
  .org-src-container>pre.src-css:before {
      content: 'CSS';
  }
  .org-src-container>pre.src-D:before {
      content: 'D';
  }
  .org-src-container>pre.src-ditaa:before {
      content: 'Ditaa';
  }
  .org-src-container>pre.src-dot:before {
      content: 'Dot';
  }
  .org-src-container>pre.src-ebnf:before {
      content: 'ebnf';
  }
  .org-src-container>pre.src-forth:before {
      content: 'Forth';
  }
  .org-src-container>pre.src-F90:before {
      content: 'Fortran';
  }
  .org-src-container>pre.src-gnuplot:before {
      content: 'Gnuplot';
  }
  .org-src-container>pre.src-haskell:before {
      content: 'Haskell';
  }
  .org-src-container>pre.src-io:before {
      content: 'Io';
  }
  .org-src-container>pre.src-java:before {
      content: 'Java';
  }
  .org-src-container>pre.src-latex:before {
      content: 'LaTeX';
  }
  .org-src-container>pre.src-ledger:before {
      content: 'Ledger';
  }
  .org-src-container>pre.src-ly:before {
      content: 'Lilypond';
  }
  .org-src-container>pre.src-lisp:before {
      content: 'Lisp';
  }
  .org-src-container>pre.src-makefile:before {
      content: 'Make';
  }
  .org-src-container>pre.src-matlab:before {
      content: 'Matlab';
  }
  .org-src-container>pre.src-max:before {
      content: 'Maxima';
  }
  .org-src-container>pre.src-mscgen:before {
      content: 'Mscgen';
  }
  .org-src-container>pre.src-Caml:before {
      content: 'Objective';
  }
  .org-src-container>pre.src-octave:before {
      content: 'Octave';
  }
  .org-src-container>pre.src-org:before {
      content: 'Org';
  }
  .org-src-container>pre.src-perl:before {
      content: 'Perl';
  }
  .org-src-container>pre.src-picolisp:before {
      content: 'Picolisp';
  }
  .org-src-container>pre.src-plantuml:before {
      content: 'PlantUML';
  }
  .org-src-container>pre.src-python:before {
      content: 'Python';
  }
  .org-src-container>pre.src-ruby:before {
      content: 'Ruby';
  }
  .org-src-container>pre.src-sass:before {
      content: 'Sass';
  }
  .org-src-container>pre.src-scala:before {
      content: 'Scala';
  }
  .org-src-container>pre.src-scheme:before {
      content: 'Scheme';
  }
  .org-src-container>pre.src-screen:before {
      content: 'Screen';
  }
  .org-src-container>pre.src-sed:before {
      content: 'Sed';
  }
  .org-src-container>pre.src-shell:before {
      content: 'shell';
  }
  .org-src-container>pre.src-shen:before {
      content: 'Shen';
  }
  .org-src-container>pre.src-sql:before {
      content: 'SQL';
  }
  .org-src-container>pre.src-sqlite:before {
      content: 'SQLite';
  }
  .org-src-container>pre.src-stan:before {
      content: 'Stan';
  }
  .org-src-container>pre.src-vala:before {
      content: 'Vala';
  }
  .org-src-container>pre.src-axiom:before {
      content: 'Axiom';
  }
  .org-src-container>pre.src-browser:before {
      content: 'HTML';
  }
  .org-src-container>pre.src-cypher:before {
      content: 'Neo4j';
  }
  .org-src-container>pre.src-elixir:before {
      content: 'Elixir';
  }
  .org-src-container>pre.src-request:before {
      content: 'http';
  }
  .org-src-container>pre.src-ipython:before {
      content: 'iPython';
  }
  .org-src-container>pre.src-kotlin:before {
      content: 'Kotlin';
  }
  .org-src-container>pre.src-Flavored Erlang  lfe:before {
      content: 'Lisp';
  }
  .org-src-container>pre.src-mongo:before {
      content: 'MongoDB';
  }
  .org-src-container>pre.src-prolog:before {
      content: 'Prolog';
  }
  .org-src-container>pre.src-rec:before {
      content: 'rec';
  }
  .org-src-container>pre.src-ML  sml:before {
      content: 'Standard';
  }
  .org-src-container>pre.src-Translate  translate:before {
      content: 'Google';
  }
  .org-src-container>pre.src-typescript:before {
      content: 'Typescript';
  }
  .org-src-container>pre.src-rust:before {
      content: 'Rust';
  }

  .inlinetask {
      background: #ffffcc;
      border: 2px solid gray;
      margin: 10px;
      padding: 10px;
  }

  #org-div-home-and-up {
      font-size: 70%;
      text-align: right;
      white-space: nowrap;
  }

  .linenr {
      font-size: $smaller;
  }

  .code-highlighted {
      background-color: #ffff00;
  }

  #bibliography {
      font-size: $smaller;
  }

  #bibliography table {
      width: 100%;
  }

  .creator {
      display: block;
  }

  @media screen and (min-width: 600px) {
      .creator {
          display: inline;
          float: right;
      }
  }
#+END_SRC
#+BEGIN_SRC css
  body {
      width:95%;
      margin:2% auto;
      font-size:14px;
      line-height:1.4em;
      font-family:Georgia,serif;
      color:#333
  }

  @media screen and (min-width:600px) {
      body {
          font-size:18px
      }
  }

  @media screen and (min-width:910px) {
      body {
          width:900px
      }
  }

  ::-moz-selection {
      background:#d6edff
  }

  ::selection {
      background:#d6edff
  }

  dl,ol,p,ul {
      margin:0 auto
  }

  .title {
      margin:.8em auto;
      color:#000
  }

  .subtitle,.title {
      text-align:center
  }

  .subtitle {
      font-size:1.1em;
      line-height:1.4;
      font-weight:700;
      margin:1em auto
  }

  .takeaway {
      margin:auto;
      width:80%;
      font-style:italic
  }

  .takeaway p:last-of-type:before {
      content:"    ";
      white-space:pre
  }

  .status {
      font-size:90%;
      margin:2em auto
  }

  [class^=section-number-] {
      margin-right:.5em
  }

  [id^=orgheadline] {
      clear:both
  }

  #footnotes {
      font-size:90%
  }

  .footpara {
      display:inline;
      margin:.2em auto
  }

  .footdef {
      margin-bottom:1em
  }

  .footdef sup {
      padding-right:.5em
  }

  a {
      color:#527d9a;
      text-decoration:none
  }

  a:hover {
      color:#035;
      border-bottom:1px dotted
  }

  figure {
      padding:0;
      margin:1em auto;
      text-align:center
  }

  img {
      max-width:100%;
      vertical-align:middle
  }

  .MathJax_Display {
      font-size:90%;
      margin:0!important;
      width:90%!important
  }

  h1,h2,h3,h4,h5,h6 {
      color:#a5573e;
      line-height:1em;
      font-family:Helvetica,sans-serif
  }

  h1,h2,h3 {
      line-height:1.4em
  }

  h4,h5,h6 {
      font-size:1em
  }

  @media screen and (min-width:600px) {
      h1 {
          font-size:2em
      }
      h2 {
          font-size:1.5em
      }
      h3 {
          font-size:1.3em
      }
      h1,h2,h3 {
          line-height:1.4em
      }
      h4,h5,h6 {
          font-size:1.1em
      }
  }

  dt {
      font-weight:700
  }

  table {
      margin:1em auto;
      border-top:2px solid;
      border-collapse:collapse
  }

  table,thead {
      border-bottom:2px solid
  }

  table td+td,table th+th {
      border-left:1px solid gray
  }

  table tr {
      border-top:1px solid #d3d3d3
  }

  td,th {
      padding:.3em .6em;
      vertical-align:middle
  }

  caption.t-above {
      caption-side:top
  }

  caption.t-bottom {
      caption-side:bottom
  }

  caption {
      margin-bottom:.3em
  }

  figcaption {
      margin-top:.3em
  }

  th.org-center,th.org-left,th.org-right {
      text-align:center
  }

  td.org-right {
      text-align:right
  }

  td.org-left {
      text-align:left
  }

  td.org-center {
      text-align:center
  }

  blockquote {
      margin:1em 2em;
      padding-left:1em;
      border-left:3px solid #ccc
  }

  kbd {
      background-color:#f7f7f7;
      font-size:80%;
      margin:0 .1em;
      padding:.1em .6em
      }

  .todo {
      background-color:red
  }

  .done,.todo {
      color:#fff;
      padding:.1em .3em;
      border-radius:3px;
      background-clip:padding-box;
      font-size:80%;
      font-family:Lucida Console,monospace;
      line-height:1
  }

  .done {
      background-color:green
  }

  .priority {
      color:orange;
      font-family:Lucida Console,monospace
  }

  #table-of-contents li {
      clear:both
  }

  .tag {
      font-family:Lucida Console,monospace;
      font-size:.7em;
      font-weight:400
  }

  .tag span {
      padding:.3em;
      float:right;
      margin-right:.5em;
      border:1px solid #bbb;
      border-radius:3px;
      background-clip:padding-box;
      color:#333;
      background-color:#eee;
      line-height:1
  }

  .timestamp {
      color:#bebebe;
      font-size:90%
  }

  .timestamp-kwd {
      color:#5f9ea0
  }

  .org-right {
      margin-left:auto;
      margin-right:0;
      text-align:right
  }

  .org-left {
      margin-left:0;
      margin-right:auto;
      text-align:left
  }

  .org-center {
      margin-left:auto;
      margin-right:auto;
      text-align:center
  }

  .underline {
      text-decoration:underline
  }

  #postamble p,#preamble p {
      font-size:90%;
      margin:.2em
  }

  p.verse {
      margin-left:3%
  }

  :not(pre)>code {
      padding:2px 5px;
      margin:auto 1px;
      border:1px solid #ddd;
      border-radius:3px;
      background-clip:padding-box;
      color:#333;
      font-size:80%
  }

  .org-src-container {
      border:1px solid #ccc;
      box-shadow:3px 3px 3px #eee;
      font-family:Lucida Console,monospace;
      font-size:80%;
      margin:1em auto;
      padding:.1em .5em;
      position:relative
  }

  .org-src-container>pre {
      overflow:auto
  }

  .org-src-container>pre:before {
      display:block;
      position:absolute;
      background-color:#b3b3b3;
      top:0;
      right:0;
      padding:0 .5em;
      border-bottom-left-radius:8px;
      border:0;
      color:#fff;
      font-size:80%
  }

  .org-src-container>pre.src-sh:before {
      content:"sh"
  }

  .org-src-container>pre.src-bash:before {
      content:"bash"
  }

  .org-src-container>pre.src-emacs-lisp:before {
      content:"Emacs Lisp"
  }

  .org-src-container>pre.src-R:before {
      content:"R"
  }

  .org-src-container>pre.src-cpp:before {
      content:"C++"
  }

  .org-src-container>pre.src-c:before {
      content:"C"
  }

  .org-src-container>pre.src-html:before {
      content:"HTML"
  }

  .org-src-container>pre.src-javascript:before,.org-src-container>pre.src-js:before {
      content:"Javascript"
  }

  // more languages 0% http://orgmode.org/worg/org-contrib/babel/languages.html .org-src-container>pre.src-abc:before {
      content:"ABC"
  }

  .org-src-container>pre.src-asymptote:before {
      content:"Asymptote"
  }

  .org-src-container>pre.src-awk:before {
      content:"Awk"
  }

  .org-src-container>pre.src-C:before {
      content:"C"
  }

  .org-src-container>pre.src-calc:before {
      content:"Calc"
  }

  .org-src-container>pre.src-clojure:before {
      content:"Clojure"
  }

  .org-src-container>pre.src-comint:before {
      content:"comint"
  }

  .org-src-container>pre.src-css:before {
      content:"CSS"
  }

  .org-src-container>pre.src-D:before {
      content:"D"
  }

  .org-src-container>pre.src-ditaa:before {
      content:"Ditaa"
  }

  .org-src-container>pre.src-dot:before {
      content:"Dot"
  }

  .org-src-container>pre.src-ebnf:before {
      content:"ebnf"
  }

  .org-src-container>pre.src-forth:before {
      content:"Forth"
  }

  .org-src-container>pre.src-F90:before {
      content:"Fortran"
  }

  .org-src-container>pre.src-gnuplot:before {
      content:"Gnuplot"
  }

  .org-src-container>pre.src-haskell:before {
      content:"Haskell"
  }

  .org-src-container>pre.src-io:before {
      content:"Io"
  }

  .org-src-container>pre.src-java:before {
      content:"Java"
  }

  .org-src-container>pre.src-latex:before {
      content:"LaTeX"
  }

  .org-src-container>pre.src-ledger:before {
      content:"Ledger"
  }

  .org-src-container>pre.src-ly:before {
      content:"Lilypond"
  }

  .org-src-container>pre.src-lisp:before {
      content:"Lisp"
  }

  .org-src-container>pre.src-makefile:before {
      content:"Make"
  }

  .org-src-container>pre.src-matlab:before {
      content:"Matlab"
  }

  .org-src-container>pre.src-max:before {
      content:"Maxima"
  }

  .org-src-container>pre.src-mscgen:before {
      content:"Mscgen"
  }

  .org-src-container>pre.src-Caml:before {
      content:"Objective"
  }

  .org-src-container>pre.src-octave:before {
      content:"Octave"
  }

  .org-src-container>pre.src-org:before {
      content:"Org"
  }

  .org-src-container>pre.src-perl:before {
      content:"Perl"
  }

  .org-src-container>pre.src-picolisp:before {
      content:"Picolisp"
  }

  .org-src-container>pre.src-plantuml:before {
      content:"PlantUML"
  }

  .org-src-container>pre.src-python:before {
      content:"Python"
  }

  .org-src-container>pre.src-ruby:before {
      content:"Ruby"
  }

  .org-src-container>pre.src-sass:before {
      content:"Sass"
  }

  .org-src-container>pre.src-scala:before {
      content:"Scala"
  }

  .org-src-container>pre.src-scheme:before {
      content:"Scheme"
  }

  .org-src-container>pre.src-screen:before {
      content:"Screen"
  }

  .org-src-container>pre.src-sed:before {
      content:"Sed"
  }

  .org-src-container>pre.src-shell:before {
      content:"shell"
  }

  .org-src-container>pre.src-shen:before {
      content:"Shen"
  }

  .org-src-container>pre.src-sql:before {
      content:"SQL"
  }

  .org-src-container>pre.src-sqlite:before {
      content:"SQLite"
  }

  .org-src-container>pre.src-stan:before {
      content:"Stan"
  }

  .org-src-container>pre.src-vala:before {
      content:"Vala"
  }

  .org-src-container>pre.src-axiom:before {
      content:"Axiom"
  }

  .org-src-container>pre.src-browser:before {
      content:"HTML"
  }

  .org-src-container>pre.src-cypher:before {
      content:"Neo4j"
  }

  .org-src-container>pre.src-elixir:before {
      content:"Elixir"
  }

  .org-src-container>pre.src-request:before {
      content:"http"
  }

  .org-src-container>pre.src-ipython:before {
      content:"iPython"
  }

  .org-src-container>pre.src-kotlin:before {
      content:"Kotlin"
  }

  .org-src-container>pre.src-Flavored erlang lfe:before {
      content:"Lisp"
  }

  .org-src-container>pre.src-mongo:before {
      content:"MongoDB"
  }

  .org-src-container>pre.src-prolog:before {
      content:"Prolog"
  }

  .org-src-container>pre.src-rec:before {
      content:"rec"
  }

  .org-src-container>pre.src-ML sml:before {
      content:"Standard"
  }

  .org-src-container>pre.src-Translate translate:before {
      content:"Google"
  }

  .org-src-container>pre.src-typescript:before {
      content:"Typescript"
  }

  .org-src-container>pre.src-rust:before {
      content:"Rust"
  }


  .inlinetask {
      background:#ffc;
      border:2px solid gray;
      margin:10px;
      padding:10px
  }

  #org-div-home-and-up {
      font-size:70%;
      text-align:right;
      white-space:nowrap
  }

  .linenr {
      font-size:90%
  }

  .code-highlighted {
      background-color:#ff0
  }

  #bibliography {
      font-size:90%
  }

  #bibliography table {
      width:100%
  }

  .creator {
      display:block
  }

  @media screen and (min-width:600px) {
      .creator {
          display:inline;
          float:right
      }
  }
#+END_SRC

# orgstyle-bare.css ends here
******* orgstyle-custom.css
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/orgstyle-custom.css
:END:

#+BEGIN_SRC css
  /*! orgstyle-custom.css | MIT License | Haran Mia */
  /* -- */

  body #preamble {
      position: relative;
      border-bottom: 4px solid #8b8b8b;
  }
  body #postamble {
      border-bottom: 2px solid #8b8b8b;
  }


  .mainsail {
      margin:.8em auto;
      color:#A53539/*#000*/
  }

  .headsail,.mainsail {
      color:black;
      text-align:left;
      font-family: "Open Sans", "Deja Vu Sans", Georgia, sans;
      font-size:250%;
      /*text-align:center;*/

  }

  .headsail {
      line-height:1.4;
      font-weight:700;
      margin:1em auto;
      color:#B9543C;
      /*font-size:1.1em;*/

  }


  .compass a {
      background: none;
  }

  .compass {
      font-family: $monospace;
      font-weight: 700;
      text-transform: uppercase;
      padding: 0;
      margin: 0;
      hyphens: none;
  }

  .compass {
      position:absolute;
      /*width:50%;
        height:100%;*/

      /*background: red;
        display: block; *//* fix for opera and ff */

      text-align:right;
      margin-top: 1em;
      right:0;
      top:0;
      margin-top:0;
    font-size: 1rem;
  }

  .compass > a {
      margin: 0 1ex;
      color:#FF8C00;
  }

  body .takeaway {
    margin: auto;
    width: 90%;
    font-style: italic;
    border-bottom: 2px solid #8b8b8b;
    /*border-bottom: 3px double #8b8b8b;*/
  }

  body .takeaway p:last-of-type {
    margin-bottom:.5em;
  }
  body .takeaway p:last-of-type:before {
      content:"";
      white-space:pre
  }

  /* -- */
#+END_SRC
# orgstyle-custom.css ends here
******* style-article-index.css
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/style-article-index.css
:END:

#+BEGIN_SRC css
  /*! style-article-index.css | MIT License | Haran Mia */
  /* -- */
  /* Todo */
  body h2 {
      padding-bottom: .75ex;
      /*border-bottom: .15ex solid black;*/
      /*border-top: .15ex solid black;*/
  }

  /* always auto updated... */
  body footer {
      display:none;
  }

  /*
  body .outline-2 .outline-text-2 .wrap-up hr {
      border-top: 1px solid #8b8b8b;
  }
  ,*/
  /*
  body .status .compass {
      border-bottom: 3px double #8b8b8b;
  }

  body h1.mainsail {
      border-bottom: 3px double #8b8b8b;
  }
  ,*/

  /* blog articles */

  /*
  body .wrap-up {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      font-size: .9rem;
      font-style: italic;
  }

  body .wrap-up p {
      margin:0;
  }

  body .wrap-up .tags {
      display: flex;
      flex-direction: column;
      text-align:left;
  }
  ,*/

  body .outline-2 {
      /*
      margin-top:10px;
      margin-left:auto;
      margin-right:auto;
      width:65%;
      height:90%;
      ,*/
      border-bottom: 1px solid #8b8b8b;
  }

  body .wrap-up {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      /*font-size: .9rem;
      font-style: italic;*/
      position:relative;
      left:0;
      right:0;
      top:0;
      bottom:0;
      margin-top:-30px;
      margin-left:auto;
      margin-right:auto;
      /*border-bottom: 1px solid #8b8b8b;*/
  }
  body .wrap-up hr {
      display: none; /* not used, instead opt a horizontal line with CSS in .wrap-up above */
      /*border-top: 1px solid #8b8b8b;*/
  }


  body .wrap-up p {
      margin:0;
  }


  body .wrap-up .tags {
      display: flex;
      flex-direction: row;
      text-align:left;
      margin-top:5px;
  }

  body .takeaway {
      margin: auto;
      width: 100%;
      font-style: normal; /*italic;*/
      border-bottom: none; /*3px double #8b8b8b;*/
      margin-top:10px;

  }

  /*--*/
  /*
  body .outline-2 .outline-text-2 .article-head {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      font-size: .12rem;
      font-style: italic;
  }

  body .outline-2 .outline-text-2 .article-head p {
      margin:0;
  }

  .takeaway {
      margin:auto;
      width:95%;
      font-style:normal
  }
  ,*/
  /* -- */
#+END_SRC
# style-article-index.css ends here
